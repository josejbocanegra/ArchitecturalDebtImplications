Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,EnterprisePlanner.Messaging.RabbitMQ,RabbitMQEventBus,C:\Users\victo\Downloads\PROYECTOS_ACTUALIZADOS\EnterprisePlanner-master\EnterprisePlanner-master\EnterprisePlanner.Messaging\RabbitMQ\RabbitMQEventBus.cs,RabbitMQEventBus,The method has 6 parameters. Parameters: connection' subsManager' autofac' logger' queueName' retryCount
Magic Number,EnterprisePlanner.Messaging.RabbitMQ,RabbitMQConnection,C:\Users\victo\Downloads\PROYECTOS_ACTUALIZADOS\EnterprisePlanner-master\EnterprisePlanner-master\EnterprisePlanner.Messaging\RabbitMQ\RabbitMQConnection.cs,TryConnect,The following statement contains a magic number: var policy = RetryPolicy.Handle<SocketException>()                     .Or<BrokerUnreachableException>()                     .WaitAndRetry(10' retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))' (ex' time) =>                     {                         Console.WriteLine(ex.ToString());                     }                 );
Magic Number,EnterprisePlanner.Messaging.RabbitMQ,RabbitMQConnection,C:\Users\victo\Downloads\PROYECTOS_ACTUALIZADOS\EnterprisePlanner-master\EnterprisePlanner-master\EnterprisePlanner.Messaging\RabbitMQ\RabbitMQConnection.cs,TryConnect,The following statement contains a magic number: var policy = RetryPolicy.Handle<SocketException>()                     .Or<BrokerUnreachableException>()                     .WaitAndRetry(10' retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))' (ex' time) =>                     {                         Console.WriteLine(ex.ToString());                     }                 );
Magic Number,EnterprisePlanner.Messaging.RabbitMQ,RabbitMQEventBus,C:\Users\victo\Downloads\PROYECTOS_ACTUALIZADOS\EnterprisePlanner-master\EnterprisePlanner-master\EnterprisePlanner.Messaging\RabbitMQ\RabbitMQEventBus.cs,Publish,The following statement contains a magic number: var policy = RetryPolicy.Handle<BrokerUnreachableException>()                 .Or<SocketException>()                 .WaitAndRetry(_retryCount' retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))' (ex' time) =>                 {                     _logger.LogWarning(ex.ToString());                 });
