Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_fix_issue_597,The method has 108 lines of code.
Long Method,Ocelot.AcceptanceTests,AuthenticationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthenticationTests.cs,GivenThereIsAnIdentityServerOn,The method has 106 lines of code.
Long Parameter List,Ocelot.AcceptanceTests,ButterflyTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ButterflyTracingTests.cs,GivenServiceOneIsRunning,The method has 5 parameters. Parameters: baseUrl' basePath' statusCode' responseBody' butterflyUrl
Long Parameter List,Ocelot.AcceptanceTests,ButterflyTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ButterflyTracingTests.cs,GivenServiceTwoIsRunning,The method has 5 parameters. Parameters: baseUrl' basePath' statusCode' responseBody' butterflyUrl
Long Parameter List,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,GivenThereIsAServiceRunningOn,The method has 5 parameters. Parameters: url' statusCode' responseBody' key' value
Long Parameter List,Ocelot.AcceptanceTests,FakeEurekaService,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\EurekaServiceDiscoveryTests.cs,FakeEurekaService,The method has 6 parameters. Parameters: serviceId' host' port' isSecure' uri' metadata
Long Parameter List,Ocelot.AcceptanceTests,GzipTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\GzipTests.cs,GivenThereIsAServiceRunningOn,The method has 5 parameters. Parameters: baseUrl' basePath' statusCode' responseBody' expected
Long Parameter List,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,GivenThereIsAServiceRunningOn,The method has 5 parameters. Parameters: baseUrl' basePath' statusCode' headerKey' headerValue
Long Parameter List,Ocelot.AcceptanceTests,OpenTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\OpenTracingTests.cs,GivenServiceOneIsRunning,The method has 5 parameters. Parameters: baseUrl' basePath' statusCode' responseBody' butterflyUrl
Long Parameter List,Ocelot.AcceptanceTests,OpenTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\OpenTracingTests.cs,GivenServiceTwoIsRunning,The method has 5 parameters. Parameters: baseUrl' basePath' statusCode' responseBody' butterflyUrl
Long Parameter List,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,GivenThereIsAServiceRunningOn,The method has 5 parameters. Parameters: baseUrl' basePath' queryString' statusCode' responseBody
Long Parameter List,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,GivenThereIsAServiceRunningOn,The method has 5 parameters. Parameters: baseUrl' basePath' statusCode' responseBody' expectedQueryString
Long Parameter List,Ocelot.AcceptanceTests,ServiceHandler,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceHandler.cs,GivenThereIsAServiceRunningOn,The method has 5 parameters. Parameters: baseUrl' basePath' del' port' protocols
Long Parameter List,Ocelot.AcceptanceTests,ServiceHandler,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceHandler.cs,GivenThereIsAServiceRunningOn,The method has 6 parameters. Parameters: baseUrl' basePath' fileName' password' port' del
Long Parameter List,Ocelot.AcceptanceTests,SslTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\SslTests.cs,GivenThereIsAServiceRunningOn,The method has 5 parameters. Parameters: baseUrl' basePath' statusCode' responseBody' port
Long Identifier,Ocelot.AcceptanceTests,ConfigurationReloadTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConfigurationReloadTests.cs,,The length of the parameter MillisecondsToWaitForChangeToken is 32.
Long Statement,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_advanced_aggregate_configs,The length of the statement  "            var commentsResponseContent = @"[{""id"":1'""writerId"":1'""postId"":2'""text"":""text1""}'{""id"":2'""writerId"":1'""postId"":2'""text"":""text2""}]";" is 151.
Long Statement,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_advanced_aggregate_configs,The length of the statement  "            var expected = "{\"Comments\":" + commentsResponseContent + "'\"UserDetails\":" + userDetailsResponseContent + "'\"PostDetails\":" + postDetailsResponseContent + "}";" is 166.
Long Statement,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,GivenServiceOneIsRunning,The length of the statement  "                _downstreamPathOne = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value;" is 137.
Long Statement,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,GivenServiceTwoIsRunning,The length of the statement  "                _downstreamPathTwo = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value;" is 137.
Long Statement,Ocelot.AcceptanceTests,ButterflyTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ButterflyTracingTests.cs,GivenServiceOneIsRunning,The length of the statement  "                        _downstreamPathOne = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 137.
Long Statement,Ocelot.AcceptanceTests,ButterflyTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ButterflyTracingTests.cs,GivenServiceTwoIsRunning,The length of the statement  "                        _downstreamPathTwo = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 137.
Long Statement,Ocelot.AcceptanceTests,CannotStartOcelotTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CannotStartOcelotTests.cs,should_throw_exception_if_cannot_start_because_service_discovery_provider_specified_in_config_but_no_service_discovery_provider_registered_with_dynamic_re_routes,The length of the statement  "            exception.Message.ShouldBe("One or more errors occurred. (Unable to start Ocelot' errors are: Unable to start Ocelot' errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?)"); " is 460.
Long Statement,Ocelot.AcceptanceTests,CannotStartOcelotTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CannotStartOcelotTests.cs,should_throw_exception_if_cannot_start_because_service_discovery_provider_specified_in_config_but_no_service_discovery_provider_registered,The length of the statement  "            exception.Message.ShouldBe("One or more errors occurred. (Unable to start Ocelot' errors are: Unable to start Ocelot' errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?'Unable to start Ocelot' errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using ServiceDiscoveryOptions but no ServiceDiscoveryFinderDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Consul and services.AddConsul() or Ocelot.Provider.Eureka and services.AddEureka()?)"); " is 823.
Long Statement,Ocelot.AcceptanceTests,CannotStartOcelotTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CannotStartOcelotTests.cs,should_throw_exception_if_cannot_start_because_no_qos_delegate_registered_globally,The length of the statement  "            exception.Message.ShouldBe("One or more errors occurred. (Unable to start Ocelot' errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?)"); " is 356.
Long Statement,Ocelot.AcceptanceTests,CannotStartOcelotTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CannotStartOcelotTests.cs,should_throw_exception_if_cannot_start_because_no_qos_delegate_registered_for_re_route,The length of the statement  "            exception.Message.ShouldBe("One or more errors occurred. (Unable to start Ocelot' errors are: Unable to start Ocelot because either a Route or GlobalConfiguration are using QoSOptions but no QosDelegatingHandlerDelegate has been registered in dependency injection container. Are you missing a package like Ocelot.Provider.Polly and services.AddPolly()?)"); " is 356.
Long Statement,Ocelot.AcceptanceTests,CannotStartOcelotTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CannotStartOcelotTests.cs,should_throw_exception_if_cannot_start,The length of the statement  "            exception.Message.ShouldBe("One or more errors occurred. (Unable to start Ocelot' errors are: Downstream Path Template test doesnt start with forward slash'Upstream Path Template api doesnt start with forward slash'When not using service discovery DownstreamHostAndPorts must be set and not empty or Ocelot cannot find your service!)"); " is 336.
Long Statement,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,Echo,The length of the statement  "                    await webSocket.SendAsync(new ArraySegment<byte>(buffer' 0' result.Count)' result.MessageType' result.EndOfMessage' CancellationToken.None); " is 140.
Long Statement,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,Message,The length of the statement  "                    await webSocket.SendAsync(new ArraySegment<byte>(bytes)' result.MessageType' result.EndOfMessage' CancellationToken.None); " is 122.
Long Statement,Ocelot.AcceptanceTests,GzipTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\GzipTests.cs,should_return_response_200_with_simple_url,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"' "\"people\"")) " is 120.
Long Statement,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,should_transform_downstream_header,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Location"' "http://www.bbc.co.uk/")) " is 123.
Long Statement,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,should_fix_issue_190,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 302' "Location"' $"http://localhost:{port}/pay/Receive")) " is 138.
Long Statement,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,should_fix_issue_205,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 302' "Location"' $"http://localhost:{port}/pay/Receive")) " is 138.
Long Statement,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,should_fix_issue_417,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 302' "Location"' $"http://localhost:{port}/pay/Receive")) " is 138.
Long Statement,Ocelot.AcceptanceTests,HttpDelegatingHandlersTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HttpDelegatingHandlersTests.cs,GivenThereIsAServiceRunningOn,The length of the statement  "                _downstreamPath = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 134.
Long Statement,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_custom_load_balancer,The length of the statement  "            Func<IServiceProvider' DownstreamRoute' IServiceDiscoveryProvider' CustomLoadBalancer> loadBalancerFactoryFunc = (serviceProvider' route' serviceDiscoveryProvider) => new CustomLoadBalancer(serviceDiscoveryProvider.Get);" is 220.
Long Statement,Ocelot.AcceptanceTests,OpenTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\OpenTracingTests.cs,GivenServiceOneIsRunning,The length of the statement  "                        _downstreamPathOne = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value;" is 137.
Long Statement,Ocelot.AcceptanceTests,OpenTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\OpenTracingTests.cs,GivenServiceTwoIsRunning,The length of the statement  "                        _downstreamPathTwo = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value;" is 137.
Long Statement,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_not_match_forward_slash_in_pattern_before_next_forward_slash,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/api/v1/aaaaaaaaa/cards"' 200' "Hello from Laura")) " is 129.
Long Statement,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,bug,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/v1/vacancy/1"' 200' "Hello from Laura")) " is 122.
Long Statement,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_201_with_complex_query_string,The length of the statement  "                .When(x => _steps.WhenIGetUrlOnTheApiGateway("/newThing?DeviceType=IphoneApp&Browser=moonpigIphone&BrowserString=-&CountryCode=123&DeviceName=iPhone 5 (GSM+CDMA)&OperatingSystem=iPhone OS 7.1.2&BrowserVersion=3708AdHoc&ipAddress=-")) " is 233.
Long Statement,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_404_when_calling_upstream_route_with_no_matching_downstream_re_route_github_issue_134,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/v1/vacancy/1"' 200' "Hello from Laura")) " is 122.
Long Statement,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_not_set_trailing_slash_on_url_template,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/swagger/lib/backbone-min.js"' 200' "Hello from Laura")) " is 137.
Long Statement,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_fix_issue_271,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/api/v1/modules/Test"' 200' "Hello from Laura")) " is 126.
Long Statement,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,GivenThereIsAServiceRunningOn,The length of the statement  "                _downstreamPath = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 134.
Long Statement,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_200_with_query_string_template,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/subscriptions/{subscriptionId}/updates"' $"?unitId={unitId}"' 200' "Hello from Laura")) " is 170.
Long Statement,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_200_with_odata_query_string,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/odata/customers"' "?$filter=Name%20eq%20'Sam'"' 200' "Hello from Laura")) " is 152.
Long Statement,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_200_with_query_string_upstream_template,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/units/{subscriptionId}/{unitId}/updates"' ""' 200' "Hello from Laura")) " is 154.
Long Statement,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_404_with_query_string_upstream_template_no_query_string,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/units/{subscriptionId}/{unitId}/updates"' ""' 200' "Hello from Laura")) " is 154.
Long Statement,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_404_with_query_string_upstream_template_different_query_string,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/units/{subscriptionId}/{unitId}/updates"' ""' 200' "Hello from Laura")) " is 154.
Long Statement,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_200_with_query_string_upstream_template_multiple_params,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/units/{subscriptionId}/{unitId}/updates"' "?productId=1"' 200' "Hello from Laura")) " is 166.
Long Statement,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_200_with_query_string_upstream_template_multiple_params,The length of the statement  "                .When(x => _steps.WhenIGetUrlOnTheApiGateway($"/api/subscriptions/{subscriptionId}/updates?unitId={unitId}&productId=1")) " is 121.
Long Statement,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,GivenThereIsAServiceRunningOn,The length of the statement  "                _downstreamPath = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 134.
Long Statement,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,should_fix_issue_555,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/OcelotServiceApplication/OcelotApplicationService/a"' 200' "Hello from Laura"' "b=c")) " is 164.
Long Statement,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,should_support_service_fabric_naming_and_dns_service_stateless_and_guest,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/OcelotServiceApplication/OcelotApplicationService/api/values"' 200' "Hello from Laura"' "test=best")) " is 179.
Long Statement,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,should_support_service_fabric_naming_and_dns_service_statefull_and_actors,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/OcelotServiceApplication/OcelotApplicationService/api/values"' 200' "Hello from Laura"' "PartitionKind=test&PartitionKey=1")) " is 203.
Long Statement,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,should_support_placeholder_in_service_fabric_service_name,The length of the statement  "            this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/Service_1.0/Api/values"' 200' "Hello from Laura"' "test=best")) " is 141.
Long Statement,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,GivenThereIsAServiceRunningOn,The length of the statement  "                _downstreamPath = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 134.
Long Statement,Ocelot.AcceptanceTests,SslTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\SslTests.cs,GivenThereIsAServiceRunningOn,The length of the statement  "                _downstreamPath = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 134.
Long Statement,Ocelot.AcceptanceTests,StartupTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StartupTests.cs,GivenThereIsAServiceRunningOn,The length of the statement  "                _downstreamPath = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 134.
Long Statement,Ocelot.AcceptanceTests,TwoDownstreamServicesTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\TwoDownstreamServicesTests.cs,GivenProductServiceTwoIsRunning,The length of the statement  "                _downstreamPathTwo = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 137.
Long Statement,Ocelot.AcceptanceTests,UpstreamHostTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\UpstreamHostTests.cs,GivenThereIsAServiceRunningOn,The length of the statement  "                _downstreamPath = !string.IsNullOrEmpty(context.Request.PathBase.Value) ? context.Request.PathBase.Value : context.Request.Path.Value; " is 134.
Long Statement,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,Echo,The length of the statement  "                    await webSocket.SendAsync(new ArraySegment<byte>(buffer' 0' result.Count)' result.MessageType' result.EndOfMessage' CancellationToken.None); " is 140.
Long Statement,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,Message,The length of the statement  "                    await webSocket.SendAsync(new ArraySegment<byte>(bytes)' result.MessageType' result.EndOfMessage' CancellationToken.None); " is 122.
Empty Catch Block,Ocelot.AcceptanceTests,RandomPortFinder,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RandomPortFinder.cs,GetRandomPort,The method has an empty catch block.
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_fix_issue_597,The following statement contains a magic number: this.Given(x => x.GivenServiceIsRunning($"http://localhost:{port}"' 200' "some_data"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/EmpDetail/US/1"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_advanced_aggregate_configs,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 200' commentsResponseContent))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/users/1"' 200' userDetailsResponseContent))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port3}"' "/posts/2"' 200' postDetailsResponseContent))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_advanced_aggregate_configs,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 200' commentsResponseContent))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/users/1"' 200' userDetailsResponseContent))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port3}"' "/posts/2"' 200' postDetailsResponseContent))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_advanced_aggregate_configs,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 200' commentsResponseContent))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/users/1"' 200' userDetailsResponseContent))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port3}"' "/posts/2"' 200' postDetailsResponseContent))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_simple_url_user_defined_aggregate,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 200' "{Hello from Laura}"))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 200' "{Hello from Tom}"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithSpecficAggregatorsRegisteredInDi<FakeDefinedAggregator' FakeDepdendency>())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_simple_url_user_defined_aggregate,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 200' "{Hello from Laura}"))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 200' "{Hello from Tom}"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithSpecficAggregatorsRegisteredInDi<FakeDefinedAggregator' FakeDepdendency>())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_simple_url,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 200' "{Hello from Laura}"))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 200' "{Hello from Tom}"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_simple_url,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 200' "{Hello from Laura}"))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 200' "{Hello from Tom}"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_simple_url_one_service_404,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 404' ""))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 200' "{Hello from Tom}"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_simple_url_one_service_404,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 404' ""))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 200' "{Hello from Tom}"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_simple_url_both_service_404,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 404' ""))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 404' ""))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_return_response_200_with_simple_url_both_service_404,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 404' ""))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 404' ""))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe(expected))                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_be_thread_safe,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 200' "{Hello from Laura}"))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 200' "{Hello from Tom}"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIMakeLotsOfDifferentRequestsToTheApiGateway())                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AggregateTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AggregateTests.cs,should_be_thread_safe,The following statement contains a magic number: this.Given(x => x.GivenServiceOneIsRunning($"http://localhost:{port1}"' "/"' 200' "{Hello from Laura}"))                 .Given(x => x.GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/"' 200' "{Hello from Tom}"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIMakeLotsOfDifferentRequestsToTheApiGateway())                 .And(x => ThenTheDownstreamUrlPathShouldBe("/"' "/"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthenticationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthenticationTests.cs,should_return_401_using_identity_server_access_token,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' "api2"' AccessTokenType.Jwt))                .And(x => x.GivenThereIsAServiceRunningOn($"{_downstreamServiceUrl}{port}"' 201' string.Empty))                .And(x => _steps.GivenThereIsAConfiguration(configuration))                .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                .And(x => _steps.GivenThePostHasContent("postContent"))                .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Unauthorized))                .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthenticationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthenticationTests.cs,should_return_response_200_using_identity_server,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' "api2"' AccessTokenType.Jwt))                 .And(x => x.GivenThereIsAServiceRunningOn($"{_downstreamServiceUrl}{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthenticationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthenticationTests.cs,should_return_response_401_using_identity_server_with_token_requested_for_other_api,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' "api2"' AccessTokenType.Jwt))                 .And(x => x.GivenThereIsAServiceRunningOn($"{_downstreamServiceUrl}{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenIHaveATokenForApi2(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Unauthorized))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthenticationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthenticationTests.cs,should_return_201_using_identity_server_access_token,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' "api2"' AccessTokenType.Jwt))                 .And(x => x.GivenThereIsAServiceRunningOn($"{_downstreamServiceUrl}{port}"' 201' string.Empty))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .And(x => _steps.GivenThePostHasContent("postContent"))                 .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthenticationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthenticationTests.cs,should_return_201_using_identity_server_reference_token,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' "api2"' AccessTokenType.Reference))                 .And(x => x.GivenThereIsAServiceRunningOn($"{_downstreamServiceUrl}{port}"' 201' string.Empty))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .And(x => _steps.GivenThePostHasContent("postContent"))                 .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthorizationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthorizationTests.cs,should_return_response_200_authorizing_route,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' AccessTokenType.Jwt))                 .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthorizationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthorizationTests.cs,should_return_response_403_authorizing_route,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' AccessTokenType.Jwt))                 .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Forbidden))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthorizationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthorizationTests.cs,should_return_response_200_using_identity_server_with_allowed_scope,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' AccessTokenType.Jwt))                 .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenIHaveATokenForApiReadOnlyScope(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthorizationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthorizationTests.cs,should_return_response_403_using_identity_server_with_scope_not_allowed,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' AccessTokenType.Jwt))                 .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenIHaveATokenForApiReadOnlyScope(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Forbidden))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,AuthorizationTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\AuthorizationTests.cs,should_fix_issue_240,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' AccessTokenType.Jwt' users))                 .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ButterflyTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ButterflyTracingTests.cs,should_forward_tracing_information_from_ocelot_and_downstream_services,The following statement contains a magic number: this.Given(x => GivenFakeButterfly(butterflyUrl))                  .And(x => GivenServiceOneIsRunning($"http://localhost:{port1}"' "/api/values"' 200' "Hello from Laura"' butterflyUrl))                  .And(x => GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/api/values"' 200' "Hello from Tom"' butterflyUrl))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningUsingButterfly(butterflyUrl))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api001/values"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api002/values"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Tom"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ButterflyTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ButterflyTracingTests.cs,should_forward_tracing_information_from_ocelot_and_downstream_services,The following statement contains a magic number: this.Given(x => GivenFakeButterfly(butterflyUrl))                  .And(x => GivenServiceOneIsRunning($"http://localhost:{port1}"' "/api/values"' 200' "Hello from Laura"' butterflyUrl))                  .And(x => GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/api/values"' 200' "Hello from Tom"' butterflyUrl))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningUsingButterfly(butterflyUrl))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api001/values"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api002/values"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Tom"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ButterflyTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ButterflyTracingTests.cs,should_forward_tracing_information_from_ocelot_and_downstream_services,The following statement contains a magic number: var commandOnAllStateMachines = Wait.WaitFor(10000).Until(() => _butterflyCalled >= 4);
Magic Number,Ocelot.AcceptanceTests,ButterflyTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ButterflyTracingTests.cs,should_forward_tracing_information_from_ocelot_and_downstream_services,The following statement contains a magic number: var commandOnAllStateMachines = Wait.WaitFor(10000).Until(() => _butterflyCalled >= 4);
Magic Number,Ocelot.AcceptanceTests,ButterflyTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ButterflyTracingTests.cs,should_return_tracing_header,The following statement contains a magic number: this.Given(x => GivenFakeButterfly(butterflyUrl))                  .And(x => GivenServiceOneIsRunning($"http://localhost:{port}"' "/api/values"' 200' "Hello from Laura"' butterflyUrl))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningUsingButterfly(butterflyUrl))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api001/values"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => _steps.ThenTheTraceHeaderIsSet("Trace-Id"))                  .And(x => _steps.ThenTheResponseHeaderIs("Tom"' "Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              FileCacheOptions = new FileCacheOptions                              {                                  TtlSeconds = 100                              }                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' null' null))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => _steps.ThenTheContentLengthIs(16))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' null' null))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => _steps.ThenTheContentLengthIs(16))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' null' null))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => _steps.ThenTheContentLengthIs(16))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response_with_expires_header,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              FileCacheOptions = new FileCacheOptions                              {                                  TtlSeconds = 100                              }                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response_with_expires_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' "Expires"' "-1"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => _steps.ThenTheContentLengthIs(16))                  .And(x => _steps.ThenTheResponseBodyHeaderIs("Expires"' "-1"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response_with_expires_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' "Expires"' "-1"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => _steps.ThenTheContentLengthIs(16))                  .And(x => _steps.ThenTheResponseBodyHeaderIs("Expires"' "-1"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response_with_expires_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' "Expires"' "-1"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => _steps.ThenTheContentLengthIs(16))                  .And(x => _steps.ThenTheResponseBodyHeaderIs("Expires"' "-1"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response_when_using_jsonserialized_cache,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              FileCacheOptions = new FileCacheOptions                              {                                  TtlSeconds = 100                              }                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response_when_using_jsonserialized_cache,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' null' null))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningUsingJsonSerializedCache())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_return_cached_response_when_using_jsonserialized_cache,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' null' null))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningUsingJsonSerializedCache())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_not_return_cached_response_as_ttl_expires,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' null' null))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .And(x => x.GivenTheCacheExpires())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Tom"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,should_not_return_cached_response_as_ttl_expires,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"' null' null))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => x.GivenTheServiceNowReturns($"http://localhost:{port}"' 200' "Hello from Tom"))                  .And(x => x.GivenTheCacheExpires())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Tom"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CachingTests.cs,GivenTheCacheExpires,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Ocelot.AcceptanceTests,CannotStartOcelotTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CannotStartOcelotTests.cs,should_throw_exception_if_cannot_start_because_service_discovery_provider_specified_in_config_but_no_service_discovery_provider_registered_with_dynamic_re_routes,The following statement contains a magic number: var invalidConfig = new FileConfiguration              {                  GlobalConfiguration = new FileGlobalConfiguration                  {                      ServiceDiscoveryProvider = new FileServiceDiscoveryProvider                      {                          Scheme = "https"'                          Host = "localhost"'                          Type = "consul"'                          Port = 8500                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,CannotStartOcelotTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CannotStartOcelotTests.cs,should_throw_exception_if_cannot_start_because_service_discovery_provider_specified_in_config_but_no_service_discovery_provider_registered,The following statement contains a magic number: var invalidConfig = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          UpstreamPathTemplate = "/laura"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          ServiceName = "test"                      }                  }'                  GlobalConfiguration = new FileGlobalConfiguration                  {                      ServiceDiscoveryProvider = new FileServiceDiscoveryProvider                      {                          Scheme = "https"'                          Host = "localhost"'                          Type = "consul"'                          Port = 8500                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,CannotStartOcelotTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CannotStartOcelotTests.cs,should_throw_exception_if_cannot_start_because_no_qos_delegate_registered_globally,The following statement contains a magic number: var invalidConfig = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = 51878'                              }                          }'                          UpstreamPathTemplate = "/laura"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          Key = "Laura"'                      }                  }'                  GlobalConfiguration = new FileGlobalConfiguration                  {                      QoSOptions = new FileQoSOptions                      {                          TimeoutValue = 1'                          ExceptionsAllowedBeforeBreaking = 1                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,CannotStartOcelotTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CannotStartOcelotTests.cs,should_throw_exception_if_cannot_start_because_no_qos_delegate_registered_for_re_route,The following statement contains a magic number: var invalidConfig = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = 51878'                              }                          }'                          UpstreamPathTemplate = "/laura"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          Key = "Laura"'                          QoSOptions = new FileQoSOptions                          {                              TimeoutValue = 1'                              ExceptionsAllowedBeforeBreaking = 1                          }                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,CaseSensitiveRoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CaseSensitiveRoutingTests.cs,should_return_response_200_when_global_ignore_case_sensitivity_set,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/PRODUCTS/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CaseSensitiveRoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CaseSensitiveRoutingTests.cs,should_return_response_200_when_route_ignore_case_sensitivity_set,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/PRODUCTS/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CaseSensitiveRoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CaseSensitiveRoutingTests.cs,should_return_response_404_when_route_respect_case_sensitivity_set,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/PRODUCTS/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CaseSensitiveRoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CaseSensitiveRoutingTests.cs,should_return_response_200_when_route_respect_case_sensitivity_set,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/PRODUCTS/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CaseSensitiveRoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CaseSensitiveRoutingTests.cs,should_return_response_404_when_global_respect_case_sensitivity_set,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/PRODUCTS/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CaseSensitiveRoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CaseSensitiveRoutingTests.cs,should_return_response_200_when_global_respect_case_sensitivity_set,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/PRODUCTS/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClaimsToDownstreamPathTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClaimsToDownstreamPathTests.cs,should_return_200_and_change_downstream_path,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' AccessTokenType.Jwt' user))                 .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/users"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("UserId: 1231231"))                 .And(x => ThenTheDownstreamPathIs("/users/1231231"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClaimsToHeadersForwardingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClaimsToHeadersForwardingTests.cs,should_return_response_200_and_foward_claim_as_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' AccessTokenType.Jwt' user))                 .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("CustomerId: 123 LocationId: 1 UserType: registered UserId: 1231231"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClaimsToQueryStringForwardingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClaimsToQueryStringForwardingTests.cs,should_return_response_200_and_foward_claim_as_query_string,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' AccessTokenType.Jwt' user))                 .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("CustomerId: 123 LocationId: 1 UserType: registered UserId: 1231231"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClaimsToQueryStringForwardingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClaimsToQueryStringForwardingTests.cs,should_return_response_200_and_foward_claim_as_query_string_and_preserve_original_string,The following statement contains a magic number: this.Given(x => x.GivenThereIsAnIdentityServerOn(_identityServerRootUrl' "api"' AccessTokenType.Jwt' user))                 .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200))                 .And(x => _steps.GivenIHaveAToken(_identityServerRootUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning(_options' "Test"))                 .And(x => _steps.GivenIHaveAddedATokenToMyRequest())                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/?test=1&test=2"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("CustomerId: 123 LocationId: 1 UserType: registered UserId: 1231231"))                 .And(_ => ThenTheQueryStringIs("?test=1&test=2&CustomerId=123&LocationId=1&UserId=1231231&UserType=registered"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_withratelimiting,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/api/ClientRateLimit"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/api/ClientRateLimit"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              RequestIdKey = _steps.RequestIdKey'                              RateLimitOptions = new FileRateLimitRule()                              {                                  EnableRateLimiting = true'                                  ClientWhitelist = new List<string>()'                                  Limit = 3'                                  Period = "1s"'                                  PeriodTimespan = 1000                              }                          }                  }'                  GlobalConfiguration = new FileGlobalConfiguration()                  {                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""'                          HttpStatusCode = 428                      }'                      RequestIdKey = "oceclientrequest"                  }              };
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_withratelimiting,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/api/ClientRateLimit"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/api/ClientRateLimit"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              RequestIdKey = _steps.RequestIdKey'                              RateLimitOptions = new FileRateLimitRule()                              {                                  EnableRateLimiting = true'                                  ClientWhitelist = new List<string>()'                                  Limit = 3'                                  Period = "1s"'                                  PeriodTimespan = 1000                              }                          }                  }'                  GlobalConfiguration = new FileGlobalConfiguration()                  {                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""'                          HttpStatusCode = 428                      }'                      RequestIdKey = "oceclientrequest"                  }              };
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_withratelimiting,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/api/ClientRateLimit"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/api/ClientRateLimit"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              RequestIdKey = _steps.RequestIdKey'                              RateLimitOptions = new FileRateLimitRule()                              {                                  EnableRateLimiting = true'                                  ClientWhitelist = new List<string>()'                                  Limit = 3'                                  Period = "1s"'                                  PeriodTimespan = 1000                              }                          }                  }'                  GlobalConfiguration = new FileGlobalConfiguration()                  {                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""'                          HttpStatusCode = 428                      }'                      RequestIdKey = "oceclientrequest"                  }              };
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_withratelimiting,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_withratelimiting,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_withratelimiting,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_withratelimiting,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/api/ClientRateLimit"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/api/ClientRateLimit"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              RequestIdKey = _steps.RequestIdKey'                                RateLimitOptions = new FileRateLimitRule()                              {                                  EnableRateLimiting = true'                                  ClientWhitelist = new List<string>()'                                  Limit = 3'                                  Period = "1s"'                                  PeriodTimespan = 2                              }                          }                  }'                  GlobalConfiguration = new FileGlobalConfiguration()                  {                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""'                          HttpStatusCode = 428                      }'                      RequestIdKey = "oceclientrequest"                  }              };
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/api/ClientRateLimit"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/api/ClientRateLimit"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              RequestIdKey = _steps.RequestIdKey'                                RateLimitOptions = new FileRateLimitRule()                              {                                  EnableRateLimiting = true'                                  ClientWhitelist = new List<string>()'                                  Limit = 3'                                  Period = "1s"'                                  PeriodTimespan = 2                              }                          }                  }'                  GlobalConfiguration = new FileGlobalConfiguration()                  {                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""'                          HttpStatusCode = 428                      }'                      RequestIdKey = "oceclientrequest"                  }              };
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/api/ClientRateLimit"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/api/ClientRateLimit"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              RequestIdKey = _steps.RequestIdKey'                                RateLimitOptions = new FileRateLimitRule()                              {                                  EnableRateLimiting = true'                                  ClientWhitelist = new List<string>()'                                  Limit = 3'                                  Period = "1s"'                                  PeriodTimespan = 2                              }                          }                  }'                  GlobalConfiguration = new FileGlobalConfiguration()                  {                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""'                          HttpStatusCode = 428                      }'                      RequestIdKey = "oceclientrequest"                  }              };
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_wait_for_period_timespan_to_elapse_before_making_next_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 2))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(428))                  .And(x => _steps.GivenIWait(1000))                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 1))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_middleware_withWhitelistClient,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/api/ClientRateLimit"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/api/ClientRateLimit"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              RequestIdKey = _steps.RequestIdKey'                                RateLimitOptions = new FileRateLimitRule()                              {                                  EnableRateLimiting = true'                                  ClientWhitelist = new List<string>() { "ocelotclient1"}'                                  Limit = 3'                                  Period = "1s"'                                  PeriodTimespan = 100                              }                          }                  }'                  GlobalConfiguration = new FileGlobalConfiguration()                  {                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""                      }'                      RequestIdKey = "oceclientrequest"                  }              };
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_middleware_withWhitelistClient,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/api/ClientRateLimit"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/api/ClientRateLimit"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              RequestIdKey = _steps.RequestIdKey'                                RateLimitOptions = new FileRateLimitRule()                              {                                  EnableRateLimiting = true'                                  ClientWhitelist = new List<string>() { "ocelotclient1"}'                                  Limit = 3'                                  Period = "1s"'                                  PeriodTimespan = 100                              }                          }                  }'                  GlobalConfiguration = new FileGlobalConfiguration()                  {                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""                      }'                      RequestIdKey = "oceclientrequest"                  }              };
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_middleware_withWhitelistClient,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 4))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,should_call_middleware_withWhitelistClient,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/ClientRateLimit"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/api/ClientRateLimit"' 4))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(200))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ClientRateLimitTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ClientRateLimitTests.cs,GivenThereIsAServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(baseUrl' basePath' context =>              {                  _counterOne++;                  context.Response.StatusCode = 200;                  context.Response.WriteAsync(_counterOne.ToString());                  return Task.CompletedTask;              });
Magic Number,Ocelot.AcceptanceTests,ConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConfigurationInConsulTests.cs,should_return_response_200_with_simple_url_when_using_jsonserialized_cache,The following statement contains a magic number: this.Given(x => GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' ""))                  .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{servicePort}"' ""' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningUsingConsulToStoreConfigAndJsonSerializedCache())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConfigurationReloadTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConfigurationReloadTests.cs,should_reload_config_on_change,The following statement contains a magic number: this.Given(x => _steps.GivenThereIsAConfiguration(_initialConfig))                 .And(x => _steps.GivenOcelotIsRunningReloadingConfig(true))                 .And(x => _steps.GivenThereIsAConfiguration(_anotherConfig))                 .And(x => _steps.GivenIWait(5000))                 .And(x => _steps.ThenConfigShouldBe(_anotherConfig))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_return_response_200_with_simple_url,The following statement contains a magic number: this.Given(x => GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' ""))                  .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{servicePort}"' ""' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningUsingConsulToStoreConfig())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_load_configuration_out_of_consul,The following statement contains a magic number: this.Given(x => GivenTheConsulConfigurationIs(consulConfig))                  .And(x => GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' ""))                  .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{servicePort}"' "/status"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningUsingConsulToStoreConfig())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/cs/status"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_load_configuration_out_of_consul_if_it_is_changed,The following statement contains a magic number: this.Given(x => GivenTheConsulConfigurationIs(consulConfig))                  .And(x => GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' ""))                  .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{servicePort}"' "/status"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningUsingConsulToStoreConfig())                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/cs/status"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .When(x => GivenTheConsulConfigurationIs(secondConsulConfig))                  .Then(x => ThenTheConfigIsUpdatedInOcelot())                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit,The following statement contains a magic number: var consulConfig = new FileConfiguration              {                  DynamicRoutes = new List<FileDynamicRoute>                  {                      new FileDynamicRoute                      {                          ServiceName = serviceName'                          RateLimitRule = new FileRateLimitRule()                          {                              EnableRateLimiting = true'                              ClientWhitelist = new List<string>()'                              Limit = 3'                              Period = "1s"'                              PeriodTimespan = 1000                          }                      }                  }'                  GlobalConfiguration = new FileGlobalConfiguration                  {                      ServiceDiscoveryProvider = new FileServiceDiscoveryProvider                      {                          Scheme = "http"'                          Host = "localhost"'                          Port = consulPort                      }'                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""'                          HttpStatusCode = 428                      }'                      DownstreamScheme = "http"'                  }              };
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit,The following statement contains a magic number: var consulConfig = new FileConfiguration              {                  DynamicRoutes = new List<FileDynamicRoute>                  {                      new FileDynamicRoute                      {                          ServiceName = serviceName'                          RateLimitRule = new FileRateLimitRule()                          {                              EnableRateLimiting = true'                              ClientWhitelist = new List<string>()'                              Limit = 3'                              Period = "1s"'                              PeriodTimespan = 1000                          }                      }                  }'                  GlobalConfiguration = new FileGlobalConfiguration                  {                      ServiceDiscoveryProvider = new FileServiceDiscoveryProvider                      {                          Scheme = "http"'                          Host = "localhost"'                          Port = consulPort                      }'                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""'                          HttpStatusCode = 428                      }'                      DownstreamScheme = "http"'                  }              };
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit,The following statement contains a magic number: var consulConfig = new FileConfiguration              {                  DynamicRoutes = new List<FileDynamicRoute>                  {                      new FileDynamicRoute                      {                          ServiceName = serviceName'                          RateLimitRule = new FileRateLimitRule()                          {                              EnableRateLimiting = true'                              ClientWhitelist = new List<string>()'                              Limit = 3'                              Period = "1s"'                              PeriodTimespan = 1000                          }                      }                  }'                  GlobalConfiguration = new FileGlobalConfiguration                  {                      ServiceDiscoveryProvider = new FileServiceDiscoveryProvider                      {                          Scheme = "http"'                          Host = "localhost"'                          Port = consulPort                      }'                      RateLimitOptions = new FileRateLimitOptions()                      {                          ClientIdHeader = "ClientId"'                          DisableRateLimitHeaders = false'                          QuotaExceededMessage = ""'                          RateLimitCounterPrefix = ""'                          HttpStatusCode = 428                      }'                      DownstreamScheme = "http"'                  }              };
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl' "/something"' 200' "Hello from Laura"))              .And(x => GivenTheConsulConfigurationIs(consulConfig))              .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))              .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne))              .And(x => _steps.GivenThereIsAConfiguration(configuration))              .And(x => _steps.GivenOcelotIsRunningUsingConsulToStoreConfig())              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 2))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(428))              .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl' "/something"' 200' "Hello from Laura"))              .And(x => GivenTheConsulConfigurationIs(consulConfig))              .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))              .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne))              .And(x => _steps.GivenThereIsAConfiguration(configuration))              .And(x => _steps.GivenOcelotIsRunningUsingConsulToStoreConfig())              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 2))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(428))              .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl' "/something"' 200' "Hello from Laura"))              .And(x => GivenTheConsulConfigurationIs(consulConfig))              .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))              .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne))              .And(x => _steps.GivenThereIsAConfiguration(configuration))              .And(x => _steps.GivenOcelotIsRunningUsingConsulToStoreConfig())              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 2))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(428))              .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl' "/something"' 200' "Hello from Laura"))              .And(x => GivenTheConsulConfigurationIs(consulConfig))              .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))              .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne))              .And(x => _steps.GivenThereIsAConfiguration(configuration))              .And(x => _steps.GivenOcelotIsRunningUsingConsulToStoreConfig())              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 2))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(428))              .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes_and_rate_limit,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl' "/something"' 200' "Hello from Laura"))              .And(x => GivenTheConsulConfigurationIs(consulConfig))              .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))              .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne))              .And(x => _steps.GivenThereIsAConfiguration(configuration))              .And(x => _steps.GivenOcelotIsRunningUsingConsulToStoreConfig())              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 2))              .Then(x => _steps.ThenTheStatusCodeShouldBe(200))              .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimesForRateLimit("/web/something"' 1))              .Then(x => _steps.ThenTheStatusCodeShouldBe(428))              .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ConsulConfigurationInConsulTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulConfigurationInConsulTests.cs,ThenTheConfigIsUpdatedInOcelot,The following statement contains a magic number: var result = Wait.WaitFor(20000).Until(() =>              {                  try                  {                      _steps.WhenIGetUrlOnTheApiGateway("/cs/status/awesome");                      _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK);                      _steps.ThenTheResponseBodyShouldBe("Hello from Laura");                      return true;                  }                  catch (Exception)                  {                      return false;                  }              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,ThenBothDownstreamServicesAreCalled,The following statement contains a magic number: _firstRecieved.Count.ShouldBe(10);
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,ThenBothDownstreamServicesAreCalled,The following statement contains a magic number: _secondRecieved.Count.ShouldBe(10);
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartClient,The following statement contains a magic number: var sending = Task.Run(async () =>              {                  string line = "test";                  for (int i = 0; i < 10; i++)                  {                      var bytes = Encoding.UTF8.GetBytes(line);                        await client.SendAsync(new ArraySegment<byte>(bytes)' WebSocketMessageType.Text' true'                          CancellationToken.None);                      await Task.Delay(10);                  }                    await client.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartClient,The following statement contains a magic number: var sending = Task.Run(async () =>              {                  string line = "test";                  for (int i = 0; i < 10; i++)                  {                      var bytes = Encoding.UTF8.GetBytes(line);                        await client.SendAsync(new ArraySegment<byte>(bytes)' WebSocketMessageType.Text' true'                          CancellationToken.None);                      await Task.Delay(10);                  }                    await client.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartClient,The following statement contains a magic number: var receiving = Task.Run(async () =>              {                  var buffer = new byte[1024 * 4];                    while (true)                  {                      var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer)' CancellationToken.None);                        if (result.MessageType == WebSocketMessageType.Text)                      {                          _firstRecieved.Add(Encoding.UTF8.GetString(buffer' 0' result.Count));                      }                      else if (result.MessageType == WebSocketMessageType.Close)                      {                          if (client.State != WebSocketState.Closed)                          {                              // Last version' the client state is CloseReceived                              // Valid states are: Open' CloseReceived' CloseSent                              await client.CloseAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);                          }                            break;                      }                  }              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartClient,The following statement contains a magic number: var receiving = Task.Run(async () =>              {                  var buffer = new byte[1024 * 4];                    while (true)                  {                      var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer)' CancellationToken.None);                        if (result.MessageType == WebSocketMessageType.Text)                      {                          _firstRecieved.Add(Encoding.UTF8.GetString(buffer' 0' result.Count));                      }                      else if (result.MessageType == WebSocketMessageType.Close)                      {                          if (client.State != WebSocketState.Closed)                          {                              // Last version' the client state is CloseReceived                              // Valid states are: Open' CloseReceived' CloseSent                              await client.CloseAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);                          }                            break;                      }                  }              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartSecondClient,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartSecondClient,The following statement contains a magic number: var sending = Task.Run(async () =>              {                  string line = "test";                  for (int i = 0; i < 10; i++)                  {                      var bytes = Encoding.UTF8.GetBytes(line);                        await client.SendAsync(new ArraySegment<byte>(bytes)' WebSocketMessageType.Text' true'                          CancellationToken.None);                      await Task.Delay(10);                  }                    await client.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartSecondClient,The following statement contains a magic number: var sending = Task.Run(async () =>              {                  string line = "test";                  for (int i = 0; i < 10; i++)                  {                      var bytes = Encoding.UTF8.GetBytes(line);                        await client.SendAsync(new ArraySegment<byte>(bytes)' WebSocketMessageType.Text' true'                          CancellationToken.None);                      await Task.Delay(10);                  }                    await client.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartSecondClient,The following statement contains a magic number: var receiving = Task.Run(async () =>              {                  var buffer = new byte[1024 * 4];                    while (true)                  {                      var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer)' CancellationToken.None);                        if (result.MessageType == WebSocketMessageType.Text)                      {                          _secondRecieved.Add(Encoding.UTF8.GetString(buffer' 0' result.Count));                      }                      else if (result.MessageType == WebSocketMessageType.Close)                      {                          if (client.State != WebSocketState.Closed)                          {                              // Last version' the client state is CloseReceived                              // Valid states are: Open' CloseReceived' CloseSent                              await client.CloseAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);                          }                            break;                      }                  }              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartSecondClient,The following statement contains a magic number: var receiving = Task.Run(async () =>              {                  var buffer = new byte[1024 * 4];                    while (true)                  {                      var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer)' CancellationToken.None);                        if (result.MessageType == WebSocketMessageType.Text)                      {                          _secondRecieved.Add(Encoding.UTF8.GetString(buffer' 0' result.Count));                      }                      else if (result.MessageType == WebSocketMessageType.Close)                      {                          if (client.State != WebSocketState.Closed)                          {                              // Last version' the client state is CloseReceived                              // Valid states are: Open' CloseReceived' CloseSent                              await client.CloseAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);                          }                            break;                      }                  }              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartFakeDownstreamService,The following statement contains a magic number: await _serviceHandler.StartFakeDownstreamService(url' path' async (context' next) =>              {                  if (context.Request.Path == path)                  {                      if (context.WebSockets.IsWebSocketRequest)                      {                          var webSocket = await context.WebSockets.AcceptWebSocketAsync();                          await Echo(webSocket);                      }                      else                      {                          context.Response.StatusCode = 400;                      }                  }                  else                  {                      await next();                  }              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,StartSecondFakeDownstreamService,The following statement contains a magic number: await _serviceHandler.StartFakeDownstreamService(url' path' async (context' next) =>              {                  if (context.Request.Path == path)                  {                      if (context.WebSockets.IsWebSocketRequest)                      {                          WebSocket webSocket = await context.WebSockets.AcceptWebSocketAsync();                          await Message(webSocket);                      }                      else                      {                          context.Response.StatusCode = 400;                      }                  }                  else                  {                      await next();                  }              });
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,Echo,The following statement contains a magic number: var buffer = new byte[1024 * 4];
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,Echo,The following statement contains a magic number: var buffer = new byte[1024 * 4];
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,Message,The following statement contains a magic number: var buffer = new byte[1024 * 4];
Magic Number,Ocelot.AcceptanceTests,ConsulWebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ConsulWebSocketTests.cs,Message,The following statement contains a magic number: var buffer = new byte[1024 * 4];
Magic Number,Ocelot.AcceptanceTests,ContentTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ContentTests.cs,should_not_add_content_type_or_content_length_headers,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => ThenTheContentTypeShouldBeEmpty())                  .And(x => ThenTheContentLengthShouldBeZero())                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ContentTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ContentTests.cs,should_add_content_type_and_content_length_headers,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 201' string.Empty))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .And(x => _steps.GivenThePostHasContentType(contentType))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created))                  .And(x => ThenTheContentLengthIs(11))                  .And(x => ThenTheContentTypeIsIs(contentType))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ContentTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ContentTests.cs,should_add_content_type_and_content_length_headers,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 201' string.Empty))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .And(x => _steps.GivenThePostHasContentType(contentType))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created))                  .And(x => ThenTheContentLengthIs(11))                  .And(x => ThenTheContentTypeIsIs(contentType))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ContentTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ContentTests.cs,should_add_default_content_type_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 201' string.Empty))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created))                  .And(x => ThenTheContentLengthIs(11))                  .And(x => ThenTheContentTypeIsIs("text/plain; charset=utf-8"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ContentTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ContentTests.cs,should_add_default_content_type_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 201' string.Empty))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created))                  .And(x => ThenTheContentLengthIs(11))                  .And(x => ThenTheContentTypeIsIs("text/plain; charset=utf-8"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CustomMiddlewareTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CustomMiddlewareTests.cs,should_call_pre_query_string_builder_middleware,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' ""))                  .And(x => _steps.GivenThereIsAConfiguration(fileConfiguration' _configurationPath))                  .And(x => _steps.GivenOcelotIsRunning(configuration))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => x.ThenTheCounterIs(1))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CustomMiddlewareTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CustomMiddlewareTests.cs,should_call_authorization_middleware,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' ""))                  .And(x => _steps.GivenThereIsAConfiguration(fileConfiguration' _configurationPath))                  .And(x => _steps.GivenOcelotIsRunning(configuration))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => x.ThenTheCounterIs(1))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CustomMiddlewareTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CustomMiddlewareTests.cs,should_call_authentication_middleware,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' ""))                  .And(x => _steps.GivenThereIsAConfiguration(fileConfiguration' _configurationPath))                  .And(x => _steps.GivenOcelotIsRunning(configuration))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => x.ThenTheCounterIs(1))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CustomMiddlewareTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CustomMiddlewareTests.cs,should_call_pre_error_middleware,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' ""))                  .And(x => _steps.GivenThereIsAConfiguration(fileConfiguration' _configurationPath))                  .And(x => _steps.GivenOcelotIsRunning(configuration))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => x.ThenTheCounterIs(1))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CustomMiddlewareTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CustomMiddlewareTests.cs,should_call_pre_authorization_middleware,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' ""))                  .And(x => _steps.GivenThereIsAConfiguration(fileConfiguration' _configurationPath))                  .And(x => _steps.GivenOcelotIsRunning(configuration))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => x.ThenTheCounterIs(1))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CustomMiddlewareTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CustomMiddlewareTests.cs,should_call_pre_http_authentication_middleware,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' ""))                  .And(x => _steps.GivenThereIsAConfiguration(fileConfiguration' _configurationPath))                  .And(x => _steps.GivenOcelotIsRunning(configuration))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => x.ThenTheCounterIs(1))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CustomMiddlewareTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CustomMiddlewareTests.cs,should_fix_issue_237,The following statement contains a magic number: Func<object' Task> callback = state =>              {                  var httpContext = (HttpContext)state;                    if (httpContext.Response.StatusCode > 400)                  {                      Debug.WriteLine("COUNT CALLED");                      Console.WriteLine("COUNT CALLED");                  }                    return Task.CompletedTask;              };
Magic Number,Ocelot.AcceptanceTests,CustomMiddlewareTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CustomMiddlewareTests.cs,should_fix_issue_237,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "/test"))                  .And(x => _steps.GivenThereIsAConfiguration(fileConfiguration' _configurationPath))                  .And(x => _steps.GivenOcelotIsRunningWithMiddleareBeforePipeline<FakeMiddleware>(callback))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,CustomMiddlewareTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\CustomMiddlewareTests.cs,GivenThereIsAServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' context =>              {                  if (string.IsNullOrEmpty(basePath))                  {                      context.Response.StatusCode = statusCode;                  }                  else if (context.Request.Path.Value != basePath)                  {                      context.Response.StatusCode = 404;                  }                    return Task.CompletedTask;              });
Magic Number,Ocelot.AcceptanceTests,EurekaServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\EurekaServiceDiscoveryTests.cs,should_use_eureka_service_discovery_and_make_request,The following statement contains a magic number: var eurekaPort = 8761;
Magic Number,Ocelot.AcceptanceTests,EurekaServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\EurekaServiceDiscoveryTests.cs,GivenThereIsAFakeEurekaServiceDiscoveryProvider,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  if (context.Request.Path.Value == "/eureka/apps/")                  {                      var apps = new List<Application>();                        foreach (var serviceInstance in _eurekaInstances)                      {                          var a = new Application                          {                              name = serviceName'                              instance = new List<Instance>                              {                                  new Instance                                  {                                      instanceId = $"{serviceInstance.Host}:{serviceInstance}"'                                      hostName = serviceInstance.Host'                                      app = serviceName'                                      ipAddr = "127.0.0.1"'                                      status = "UP"'                                      overriddenstatus = "UNKNOWN"'                                      port = new Port {value = serviceInstance.Port' enabled = "true"}'                                      securePort = new SecurePort {value = serviceInstance.Port' enabled = "true"}'                                      countryId = 1'                                      dataCenterInfo = new DataCenterInfo {value = "com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"' name = "MyOwn"}'                                      leaseInfo = new LeaseInfo                                      {                                          renewalIntervalInSecs = 30'                                          durationInSecs = 90'                                          registrationTimestamp = 1457714988223'                                          lastRenewalTimestamp= 1457716158319'                                          evictionTimestamp = 0'                                          serviceUpTimestamp = 1457714988223'                                      }'                                      metadata = new Metadata                                      {                                          value = "java.util.Collections$EmptyMap"'                                      }'                                      homePageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      statusPageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      healthCheckUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      vipAddress = serviceName'                                      isCoordinatingDiscoveryServer = "false"'                                      lastUpdatedTimestamp = "1457714988223"'                                      lastDirtyTimestamp = "1457714988172"'                                      actionType = "ADDED"'                                  }'                              }'                          };                            apps.Add(a);                      }                        var applications = new EurekaApplications                      {                          applications = new Applications                          {                              application = apps'                              apps__hashcode = "UP_1_"'                              versions__delta = "1"'                          }'                      };                        var json = JsonConvert.SerializeObject(applications);                      context.Response.Headers.Add("Content-Type"' "application/json");                      await context.Response.WriteAsync(json);                  }              });
Magic Number,Ocelot.AcceptanceTests,EurekaServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\EurekaServiceDiscoveryTests.cs,GivenThereIsAFakeEurekaServiceDiscoveryProvider,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  if (context.Request.Path.Value == "/eureka/apps/")                  {                      var apps = new List<Application>();                        foreach (var serviceInstance in _eurekaInstances)                      {                          var a = new Application                          {                              name = serviceName'                              instance = new List<Instance>                              {                                  new Instance                                  {                                      instanceId = $"{serviceInstance.Host}:{serviceInstance}"'                                      hostName = serviceInstance.Host'                                      app = serviceName'                                      ipAddr = "127.0.0.1"'                                      status = "UP"'                                      overriddenstatus = "UNKNOWN"'                                      port = new Port {value = serviceInstance.Port' enabled = "true"}'                                      securePort = new SecurePort {value = serviceInstance.Port' enabled = "true"}'                                      countryId = 1'                                      dataCenterInfo = new DataCenterInfo {value = "com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"' name = "MyOwn"}'                                      leaseInfo = new LeaseInfo                                      {                                          renewalIntervalInSecs = 30'                                          durationInSecs = 90'                                          registrationTimestamp = 1457714988223'                                          lastRenewalTimestamp= 1457716158319'                                          evictionTimestamp = 0'                                          serviceUpTimestamp = 1457714988223'                                      }'                                      metadata = new Metadata                                      {                                          value = "java.util.Collections$EmptyMap"'                                      }'                                      homePageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      statusPageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      healthCheckUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      vipAddress = serviceName'                                      isCoordinatingDiscoveryServer = "false"'                                      lastUpdatedTimestamp = "1457714988223"'                                      lastDirtyTimestamp = "1457714988172"'                                      actionType = "ADDED"'                                  }'                              }'                          };                            apps.Add(a);                      }                        var applications = new EurekaApplications                      {                          applications = new Applications                          {                              application = apps'                              apps__hashcode = "UP_1_"'                              versions__delta = "1"'                          }'                      };                        var json = JsonConvert.SerializeObject(applications);                      context.Response.Headers.Add("Content-Type"' "application/json");                      await context.Response.WriteAsync(json);                  }              });
Magic Number,Ocelot.AcceptanceTests,EurekaServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\EurekaServiceDiscoveryTests.cs,GivenThereIsAFakeEurekaServiceDiscoveryProvider,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  if (context.Request.Path.Value == "/eureka/apps/")                  {                      var apps = new List<Application>();                        foreach (var serviceInstance in _eurekaInstances)                      {                          var a = new Application                          {                              name = serviceName'                              instance = new List<Instance>                              {                                  new Instance                                  {                                      instanceId = $"{serviceInstance.Host}:{serviceInstance}"'                                      hostName = serviceInstance.Host'                                      app = serviceName'                                      ipAddr = "127.0.0.1"'                                      status = "UP"'                                      overriddenstatus = "UNKNOWN"'                                      port = new Port {value = serviceInstance.Port' enabled = "true"}'                                      securePort = new SecurePort {value = serviceInstance.Port' enabled = "true"}'                                      countryId = 1'                                      dataCenterInfo = new DataCenterInfo {value = "com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"' name = "MyOwn"}'                                      leaseInfo = new LeaseInfo                                      {                                          renewalIntervalInSecs = 30'                                          durationInSecs = 90'                                          registrationTimestamp = 1457714988223'                                          lastRenewalTimestamp= 1457716158319'                                          evictionTimestamp = 0'                                          serviceUpTimestamp = 1457714988223'                                      }'                                      metadata = new Metadata                                      {                                          value = "java.util.Collections$EmptyMap"'                                      }'                                      homePageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      statusPageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      healthCheckUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      vipAddress = serviceName'                                      isCoordinatingDiscoveryServer = "false"'                                      lastUpdatedTimestamp = "1457714988223"'                                      lastDirtyTimestamp = "1457714988172"'                                      actionType = "ADDED"'                                  }'                              }'                          };                            apps.Add(a);                      }                        var applications = new EurekaApplications                      {                          applications = new Applications                          {                              application = apps'                              apps__hashcode = "UP_1_"'                              versions__delta = "1"'                          }'                      };                        var json = JsonConvert.SerializeObject(applications);                      context.Response.Headers.Add("Content-Type"' "application/json");                      await context.Response.WriteAsync(json);                  }              });
Magic Number,Ocelot.AcceptanceTests,EurekaServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\EurekaServiceDiscoveryTests.cs,GivenThereIsAFakeEurekaServiceDiscoveryProvider,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  if (context.Request.Path.Value == "/eureka/apps/")                  {                      var apps = new List<Application>();                        foreach (var serviceInstance in _eurekaInstances)                      {                          var a = new Application                          {                              name = serviceName'                              instance = new List<Instance>                              {                                  new Instance                                  {                                      instanceId = $"{serviceInstance.Host}:{serviceInstance}"'                                      hostName = serviceInstance.Host'                                      app = serviceName'                                      ipAddr = "127.0.0.1"'                                      status = "UP"'                                      overriddenstatus = "UNKNOWN"'                                      port = new Port {value = serviceInstance.Port' enabled = "true"}'                                      securePort = new SecurePort {value = serviceInstance.Port' enabled = "true"}'                                      countryId = 1'                                      dataCenterInfo = new DataCenterInfo {value = "com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"' name = "MyOwn"}'                                      leaseInfo = new LeaseInfo                                      {                                          renewalIntervalInSecs = 30'                                          durationInSecs = 90'                                          registrationTimestamp = 1457714988223'                                          lastRenewalTimestamp= 1457716158319'                                          evictionTimestamp = 0'                                          serviceUpTimestamp = 1457714988223'                                      }'                                      metadata = new Metadata                                      {                                          value = "java.util.Collections$EmptyMap"'                                      }'                                      homePageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      statusPageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      healthCheckUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      vipAddress = serviceName'                                      isCoordinatingDiscoveryServer = "false"'                                      lastUpdatedTimestamp = "1457714988223"'                                      lastDirtyTimestamp = "1457714988172"'                                      actionType = "ADDED"'                                  }'                              }'                          };                            apps.Add(a);                      }                        var applications = new EurekaApplications                      {                          applications = new Applications                          {                              application = apps'                              apps__hashcode = "UP_1_"'                              versions__delta = "1"'                          }'                      };                        var json = JsonConvert.SerializeObject(applications);                      context.Response.Headers.Add("Content-Type"' "application/json");                      await context.Response.WriteAsync(json);                  }              });
Magic Number,Ocelot.AcceptanceTests,EurekaServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\EurekaServiceDiscoveryTests.cs,GivenThereIsAFakeEurekaServiceDiscoveryProvider,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  if (context.Request.Path.Value == "/eureka/apps/")                  {                      var apps = new List<Application>();                        foreach (var serviceInstance in _eurekaInstances)                      {                          var a = new Application                          {                              name = serviceName'                              instance = new List<Instance>                              {                                  new Instance                                  {                                      instanceId = $"{serviceInstance.Host}:{serviceInstance}"'                                      hostName = serviceInstance.Host'                                      app = serviceName'                                      ipAddr = "127.0.0.1"'                                      status = "UP"'                                      overriddenstatus = "UNKNOWN"'                                      port = new Port {value = serviceInstance.Port' enabled = "true"}'                                      securePort = new SecurePort {value = serviceInstance.Port' enabled = "true"}'                                      countryId = 1'                                      dataCenterInfo = new DataCenterInfo {value = "com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"' name = "MyOwn"}'                                      leaseInfo = new LeaseInfo                                      {                                          renewalIntervalInSecs = 30'                                          durationInSecs = 90'                                          registrationTimestamp = 1457714988223'                                          lastRenewalTimestamp= 1457716158319'                                          evictionTimestamp = 0'                                          serviceUpTimestamp = 1457714988223'                                      }'                                      metadata = new Metadata                                      {                                          value = "java.util.Collections$EmptyMap"'                                      }'                                      homePageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      statusPageUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      healthCheckUrl = $"{serviceInstance.Host}:{serviceInstance.Port}"'                                      vipAddress = serviceName'                                      isCoordinatingDiscoveryServer = "false"'                                      lastUpdatedTimestamp = "1457714988223"'                                      lastDirtyTimestamp = "1457714988172"'                                      actionType = "ADDED"'                                  }'                              }'                          };                            apps.Add(a);                      }                        var applications = new EurekaApplications                      {                          applications = new Applications                          {                              application = apps'                              apps__hashcode = "UP_1_"'                              versions__delta = "1"'                          }'                      };                        var json = JsonConvert.SerializeObject(applications);                      context.Response.Headers.Add("Content-Type"' "application/json");                      await context.Response.WriteAsync(json);                  }              });
Magic Number,Ocelot.AcceptanceTests,EurekaServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\EurekaServiceDiscoveryTests.cs,GivenEurekaProductServiceOneIsRunning,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  try                  {                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(nameof(EurekaServiceDiscoveryTests));                  }                  catch (Exception exception)                  {                      await context.Response.WriteAsync(exception.StackTrace);                  }              });
Magic Number,Ocelot.AcceptanceTests,GzipTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\GzipTests.cs,should_return_response_200_with_simple_url,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"' "\"people\""))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenThePostHasGzipContent(input))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,should_transform_upstream_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Laz"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenIAddAHeader("Laz"' "D"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("GP"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,should_transform_downstream_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Location"' "http://www.bbc.co.uk/"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseHeaderIs("Location"' "http://ocelot.com/"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,should_fix_issue_190,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 302' "Location"' $"http://localhost:{port}/pay/Receive"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Redirect))                  .And(x => _steps.ThenTheResponseHeaderIs("Location"' "http://localhost:5000/pay/Receive"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,should_fix_issue_205,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 302' "Location"' $"http://localhost:{port}/pay/Receive"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Redirect))                  .And(x => _steps.ThenTheResponseHeaderIs("Location"' "http://localhost:5000/pay/Receive"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,should_fix_issue_417,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 302' "Location"' $"http://localhost:{port}/pay/Receive"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Redirect))                  .And(x => _steps.ThenTheResponseHeaderIs("Location"' "http://anotherapp.azurewebsites.net/pay/Receive"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,request_should_reuse_cookies_with_cookie_container,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/sso/test"' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/sso/test"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseHeaderIs("Set-Cookie"' "test=0; path=/"))                  .And(x => _steps.GivenIAddCookieToMyRequest("test=1; path=/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/sso/test"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,request_should_have_own_cookies_no_cookie_container,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/sso/test"' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/sso/test"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseHeaderIs("Set-Cookie"' "test=0; path=/"))                  .And(x => _steps.GivenIAddCookieToMyRequest("test=1; path=/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/sso/test"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,issue_474_should_not_put_spaces_in_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Accept"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenIAddAHeader("Accept"' "text/html'application/xhtml+xml'application/xml;"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("text/html'application/xhtml+xml'application/xml;"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,issue_474_should_put_spaces_in_header,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Accept"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenIAddAHeader("Accept"' "text/html"))                  .And(x => _steps.GivenIAddAHeader("Accept"' "application/xhtml+xml"))                  .And(x => _steps.GivenIAddAHeader("Accept"' "application/xml"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("text/html' application/xhtml+xml' application/xml"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HeaderTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HeaderTests.cs,GivenThereIsAServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(baseUrl' basePath' context =>              {                  if (_count == 0)                  {                      context.Response.Cookies.Append("test"' "0");                      _count++;                      context.Response.StatusCode = statusCode;                      return Task.CompletedTask;                  }                    if (context.Request.Cookies.TryGetValue("test"' out var cookieValue))                  {                      if (cookieValue == "0")                      {                          context.Response.StatusCode = statusCode;                          return Task.CompletedTask;                      }                  }                    if (context.Request.Headers.TryGetValue("Set-Cookie"' out var headerValue))                  {                      if (headerValue == "test=1; path=/")                      {                          context.Response.StatusCode = statusCode;                          return Task.CompletedTask;                      }                  }                    context.Response.StatusCode = 500;                  return Task.CompletedTask;              });
Magic Number,Ocelot.AcceptanceTests,HttpClientCachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HttpClientCachingTests.cs,should_cache_one_http_client_same_re_route,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithFakeHttpClientCache(cache))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                 .And(x => ThenTheCountShouldBe(cache' 1))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HttpClientCachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HttpClientCachingTests.cs,should_cache_two_http_client_different_re_route,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithFakeHttpClientCache(cache))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/two"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/two"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/two"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                 .And(x => ThenTheCountShouldBe(cache' 2))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HttpClientCachingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HttpClientCachingTests.cs,should_cache_two_http_client_different_re_route,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' "Hello from Laura"))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithFakeHttpClientCache(cache))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/two"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/two"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/two"))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                 .And(x => ThenTheCountShouldBe(cache' 2))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HttpDelegatingHandlersTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HttpDelegatingHandlersTests.cs,should_call_re_route_ordered_specific_handlers,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithSpecficHandlersRegisteredInDi<FakeHandler' FakeHandlerTwo>())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => ThenTheOrderedHandlersAreCalledCorrectly())                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HttpDelegatingHandlersTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HttpDelegatingHandlersTests.cs,should_call_global_di_handlers,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi<FakeHandler' FakeHandlerTwo>())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => ThenTheHandlersAreCalledCorrectly())                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HttpDelegatingHandlersTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HttpDelegatingHandlersTests.cs,should_call_global_di_handlers_multiple_times,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithGlobalHandlerRegisteredInDi<FakeHandlerAgain>())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HttpDelegatingHandlersTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HttpDelegatingHandlersTests.cs,should_call_global_di_handlers_with_dependency,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithGlobalHandlersRegisteredInDi<FakeHandlerWithDependency>(dependency))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => ThenTheDependencyIsCalled(dependency))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,HttpTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\HttpTests.cs,GivenThereIsAServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(baseUrl' basePath' async context =>              {                  context.Response.StatusCode = 200;                  var reader = new StreamReader(context.Request.Body);                  var body = await reader.ReadToEndAsync();                  await context.Response.WriteAsync(body);              }' port' protocols);
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_least_connection,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_least_connection,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_least_connection,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_least_connection,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_least_connection,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_least_connection,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_round_robin,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_round_robin,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_round_robin,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_round_robin,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_round_robin,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_round_robin,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunning())                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_custom_load_balancer,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithCustomLoadBalancer(loadBalancerFactoryFunc))                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_custom_load_balancer,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithCustomLoadBalancer(loadBalancerFactoryFunc))                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_custom_load_balancer,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithCustomLoadBalancer(loadBalancerFactoryFunc))                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_custom_load_balancer,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithCustomLoadBalancer(loadBalancerFactoryFunc))                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_custom_load_balancer,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithCustomLoadBalancer(loadBalancerFactoryFunc))                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,LoadBalancerTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\LoadBalancerTests.cs,should_load_balance_request_with_custom_load_balancer,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                 .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningWithCustomLoadBalancer(loadBalancerFactoryFunc))                 .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                 .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                 .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,MethodTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\MethodTests.cs,GivenThereIsAServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(baseUrl' basePath' async context =>              {                  if (context.Request.Method == expected)                  {                      context.Response.StatusCode = 200;                      var reader = new StreamReader(context.Request.Body);                      var body = await reader.ReadToEndAsync();                      await context.Response.WriteAsync(body);                  }                  else                  {                      context.Response.StatusCode = 500;                  }              });
Magic Number,Ocelot.AcceptanceTests,MethodTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\MethodTests.cs,GivenThereIsAServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(baseUrl' basePath' async context =>              {                  if (context.Request.Method == expected)                  {                      context.Response.StatusCode = 200;                      var reader = new StreamReader(context.Request.Body);                      var body = await reader.ReadToEndAsync();                      await context.Response.WriteAsync(body);                  }                  else                  {                      context.Response.StatusCode = 500;                  }              });
Magic Number,Ocelot.AcceptanceTests,OpenTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\OpenTracingTests.cs,should_forward_tracing_information_from_ocelot_and_downstream_services,The following statement contains a magic number: this.Given(_ => GivenFakeOpenTracing(tracingUrl))                 .And(_ => GivenServiceOneIsRunning($"http://localhost:{port1}"' "/api/values"' 200' "Hello from Laura"' tracingUrl))                 .And(_ => GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/api/values"' 200' "Hello from Tom"' tracingUrl))                 .And(_ => _steps.GivenThereIsAConfiguration(configuration))                 .And(_ => _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer))                 .When(_ => _steps.WhenIGetUrlOnTheApiGateway("/api001/values"))                 .Then(_ => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(_ => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                 .When(_ => _steps.WhenIGetUrlOnTheApiGateway("/api002/values"))                 .Then(_ => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(_ => _steps.ThenTheResponseBodyShouldBe("Hello from Tom"))                 .And(_ => ThenTheTracerIsCalled(fakeTracer))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,OpenTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\OpenTracingTests.cs,should_forward_tracing_information_from_ocelot_and_downstream_services,The following statement contains a magic number: this.Given(_ => GivenFakeOpenTracing(tracingUrl))                 .And(_ => GivenServiceOneIsRunning($"http://localhost:{port1}"' "/api/values"' 200' "Hello from Laura"' tracingUrl))                 .And(_ => GivenServiceTwoIsRunning($"http://localhost:{port2}"' "/api/values"' 200' "Hello from Tom"' tracingUrl))                 .And(_ => _steps.GivenThereIsAConfiguration(configuration))                 .And(_ => _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer))                 .When(_ => _steps.WhenIGetUrlOnTheApiGateway("/api001/values"))                 .Then(_ => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(_ => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                 .When(_ => _steps.WhenIGetUrlOnTheApiGateway("/api002/values"))                 .Then(_ => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(_ => _steps.ThenTheResponseBodyShouldBe("Hello from Tom"))                 .And(_ => ThenTheTracerIsCalled(fakeTracer))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,OpenTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\OpenTracingTests.cs,should_return_tracing_header,The following statement contains a magic number: this.Given(x => GivenFakeOpenTracing(butterflyUrl))                 .And(x => GivenServiceOneIsRunning($"http://localhost:{port}"' "/api/values"' 200' "Hello from Laura"' butterflyUrl))                 .And(x => _steps.GivenThereIsAConfiguration(configuration))                 .And(x => _steps.GivenOcelotIsRunningUsingOpenTracing(fakeTracer))                 .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api001/values"))                 .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                 .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                 .And(x => _steps.ThenTheTraceHeaderIsSet("Trace-Id"))                 .And(x => _steps.ThenTheResponseHeaderIs("Tom"' "Laura"))                 .BDDfy();
Magic Number,Ocelot.AcceptanceTests,OpenTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\OpenTracingTests.cs,ThenTheTracerIsCalled,The following statement contains a magic number: var commandOnAllStateMachines = Wait.WaitFor(10000).Until(() => fakeTracer.BuildSpanCalled >= 2);
Magic Number,Ocelot.AcceptanceTests,OpenTracingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\OpenTracingTests.cs,ThenTheTracerIsCalled,The following statement contains a magic number: var commandOnAllStateMachines = Wait.WaitFor(10000).Until(() => fakeTracer.BuildSpanCalled >= 2);
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_not_timeout,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port'                              }                          }'                          DownstreamScheme = "http"'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Post" }'                          QoSOptions = new FileQoSOptions                          {                              TimeoutValue = 1000'                              ExceptionsAllowedBeforeBreaking = 10                          }                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_not_timeout,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port'                              }                          }'                          DownstreamScheme = "http"'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Post" }'                          QoSOptions = new FileQoSOptions                          {                              TimeoutValue = 1000'                              ExceptionsAllowedBeforeBreaking = 10                          }                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_not_timeout,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' string.Empty' 10))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithPolly())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_not_timeout,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 200' string.Empty' 10))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithPolly())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_timeout,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port'                              }                          }'                          DownstreamScheme = "http"'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Post" }'                          QoSOptions = new FileQoSOptions                          {                              TimeoutValue = 10'                              ExceptionsAllowedBeforeBreaking = 10                          }                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_timeout,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port'                              }                          }'                          DownstreamScheme = "http"'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Post" }'                          QoSOptions = new FileQoSOptions                          {                              TimeoutValue = 10'                              ExceptionsAllowedBeforeBreaking = 10                          }                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_timeout,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 201' string.Empty' 1000))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithPolly())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_timeout,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' 201' string.Empty' 1000))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithPolly())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_open_circuit_breaker_then_close,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          QoSOptions = new FileQoSOptions                          {                              ExceptionsAllowedBeforeBreaking = 1'                              TimeoutValue = 500'                              DurationOfBreak = 1000                          }'                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_open_circuit_breaker_then_close,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          QoSOptions = new FileQoSOptions                          {                              ExceptionsAllowedBeforeBreaking = 1'                              TimeoutValue = 500'                              DurationOfBreak = 1000                          }'                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,should_open_circuit_breaker_then_close,The following statement contains a magic number: this.Given(x => x.GivenThereIsAPossiblyBrokenServiceRunningOn($"http://localhost:{port}"' "Hello from Laura"))                  .Given(x => _steps.GivenThereIsAConfiguration(configuration))                  .Given(x => _steps.GivenOcelotIsRunningWithPolly())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .Given(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Given(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .Given(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Given(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .Given(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Given(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .Given(x => x.GivenIWaitMilliseconds(3000))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,open_circuit_should_not_effect_different_route,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port1'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          QoSOptions = new FileQoSOptions                          {                              ExceptionsAllowedBeforeBreaking = 1'                              TimeoutValue = 500'                              DurationOfBreak = 1000                          }                      }'                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port2'                              }                          }'                          UpstreamPathTemplate = "/working"'                          UpstreamHttpMethod = new List<string> { "Get" }'                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,open_circuit_should_not_effect_different_route,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port1'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          QoSOptions = new FileQoSOptions                          {                              ExceptionsAllowedBeforeBreaking = 1'                              TimeoutValue = 500'                              DurationOfBreak = 1000                          }                      }'                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port2'                              }                          }'                          UpstreamPathTemplate = "/working"'                          UpstreamHttpMethod = new List<string> { "Get" }'                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,open_circuit_should_not_effect_different_route,The following statement contains a magic number: this.Given(x => x.GivenThereIsAPossiblyBrokenServiceRunningOn($"http://localhost:{port1}"' "Hello from Laura"))                  .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port2}/"' 200' "Hello from Tom"' 0))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithPolly())                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/working"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Tom"))                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .And(x => x.GivenIWaitMilliseconds(3000))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,open_circuit_should_not_effect_different_route,The following statement contains a magic number: this.Given(x => x.GivenThereIsAPossiblyBrokenServiceRunningOn($"http://localhost:{port1}"' "Hello from Laura"))                  .And(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port2}/"' 200' "Hello from Tom"' 0))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithPolly())                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/working"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Tom"))                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .And(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .And(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.ServiceUnavailable))                  .And(x => x.GivenIWaitMilliseconds(3000))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,GivenThereIsAPossiblyBrokenServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  //circuit starts closed                  if (_requestCount == 0)                  {                      _requestCount++;                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                      return;                  }                    //request one times out and polly throws exception' circuit opens                  if (_requestCount == 1)                  {                      _requestCount++;                      await Task.Delay(1000);                      context.Response.StatusCode = 200;                      return;                  }                    //after break closes we return 200 OK                  if (_requestCount == 2)                  {                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                  }              });
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,GivenThereIsAPossiblyBrokenServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  //circuit starts closed                  if (_requestCount == 0)                  {                      _requestCount++;                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                      return;                  }                    //request one times out and polly throws exception' circuit opens                  if (_requestCount == 1)                  {                      _requestCount++;                      await Task.Delay(1000);                      context.Response.StatusCode = 200;                      return;                  }                    //after break closes we return 200 OK                  if (_requestCount == 2)                  {                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                  }              });
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,GivenThereIsAPossiblyBrokenServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  //circuit starts closed                  if (_requestCount == 0)                  {                      _requestCount++;                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                      return;                  }                    //request one times out and polly throws exception' circuit opens                  if (_requestCount == 1)                  {                      _requestCount++;                      await Task.Delay(1000);                      context.Response.StatusCode = 200;                      return;                  }                    //after break closes we return 200 OK                  if (_requestCount == 2)                  {                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                  }              });
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,GivenThereIsAPossiblyBrokenServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  //circuit starts closed                  if (_requestCount == 0)                  {                      _requestCount++;                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                      return;                  }                    //request one times out and polly throws exception' circuit opens                  if (_requestCount == 1)                  {                      _requestCount++;                      await Task.Delay(1000);                      context.Response.StatusCode = 200;                      return;                  }                    //after break closes we return 200 OK                  if (_requestCount == 2)                  {                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                  }              });
Magic Number,Ocelot.AcceptanceTests,PollyQoSTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\PollyQoSTests.cs,GivenThereIsAPossiblyBrokenServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(url' async context =>              {                  //circuit starts closed                  if (_requestCount == 0)                  {                      _requestCount++;                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                      return;                  }                    //request one times out and polly throws exception' circuit opens                  if (_requestCount == 1)                  {                      _requestCount++;                      await Task.Delay(1000);                      context.Response.StatusCode = 200;                      return;                  }                    //after break closes we return 200 OK                  if (_requestCount == 2)                  {                      context.Response.StatusCode = 200;                      await context.Response.WriteAsync(responseBody);                  }              });
Magic Number,Ocelot.AcceptanceTests,ResponseCodeTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ResponseCodeTests.cs,should_return_response_304_when_service_returns_304,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/inline.132.bundle.js"' 304))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/inline.132.bundle.js"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotModified))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ReturnsErrorTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ReturnsErrorTests.cs,should_return_bad_gateway_error_if_downstream_service_doesnt_respond,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = 53877'                                  }'                              }'                              DownstreamScheme = "http"'                          }'                      }'              };
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_not_match_forward_slash_in_pattern_before_next_forward_slash,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/api/v1/aaaaaaaaa/cards"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api/v1/aaaaaaaaa/cards"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_with_forward_slash_and_placeholder_only,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_favouring_forward_slash_with_path_route,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/{url}"'                              DownstreamScheme = "http"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              UpstreamPathTemplate = "/{url}"'                              UpstreamHttpMethod = new List<string> { "Get" }'                          }'                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = 50810'                                  }                              }'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_favouring_forward_slash_with_path_route,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/test"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/test"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_favouring_forward_slash,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/{url}"'                              DownstreamScheme = "http"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = 51880'                                  }                              }'                              UpstreamPathTemplate = "/{url}"'                              UpstreamHttpMethod = new List<string> { "Get" }'                          }'                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_favouring_forward_slash,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_favouring_forward_slash_route_because_it_is_first,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                          }'                          new FileRoute                          {                              DownstreamPathTemplate = "/{url}"'                              DownstreamScheme = "http"'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = 51879'                                  }                              }'                              UpstreamPathTemplate = "/{url}"'                              UpstreamHttpMethod = new List<string> { "Get" }'                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_favouring_forward_slash_route_because_it_is_first,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_with_nothing_and_placeholder_only,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway(""))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_with_simple_url,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,bug,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/v1/vacancy/1"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/vacancy/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_when_path_missing_forward_slash_as_first_char,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_when_host_has_trailing_slash,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_ok_when_upstream_url_ends_with_forward_slash_but_template_does_not,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/products"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/products"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_not_found_when_upstream_url_ends_with_forward_slash_but_template_does_not,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/products"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/products/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_not_found,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/products"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/products/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_with_complex_url,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/products/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Some Product"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_with_complex_url_that_starts_with_placeholder,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/23/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("23/products/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Some Product"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_not_add_trailing_slash_to_downstream_url,The following statement contains a magic number: this.Given(x => GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/products/1"))                  .Then(x => ThenTheDownstreamUrlPathShouldBe("/api/products/1"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_201_with_simple_url,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 201' string.Empty))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_201_with_complex_query_string,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/newThing"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/newThing?DeviceType=IphoneApp&Browser=moonpigIphone&BrowserString=-&CountryCode=123&DeviceName=iPhone 5 (GSM+CDMA)&OperatingSystem=iPhone OS 7.1.2&BrowserVersion=3708AdHoc&ipAddress=-"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_with_placeholder_for_final_url_path,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/products/1"' 200' "Some Product"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/myApp1Name/api/products/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Some Product"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_201_with_simple_url_and_multiple_upstream_http_method,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' ""' 201' string.Empty))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .And(x => _steps.GivenThePostHasContent("postContent"))                  .When(x => _steps.WhenIPostUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.Created))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_response_200_with_simple_url_and_any_upstream_http_method,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_return_404_when_calling_upstream_route_with_no_matching_downstream_re_route_github_issue_134,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/v1/vacancy/1"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("api/vacancy/1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_not_set_trailing_slash_on_url_template,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/api/swagger/lib/backbone-min.js"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/platform/swagger/lib/backbone-min.js"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(x => ThenTheDownstreamUrlPathShouldBe("/api/swagger/lib/backbone-min.js"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_use_priority,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/goods/{url}"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/goods/{url}"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = 53879'                                  }                              }'                              Priority = 0                          }'                          new FileRoute                          {                              DownstreamPathTemplate = "/goods/delete"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/goods/delete"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_use_priority,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/goods/delete"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/goods/delete"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_match_multiple_paths_with_catch_all,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/test/toot"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/test/toot"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_fix_issue_271,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/api/v1/{everything}"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/api/v1/{everything}"'                              UpstreamHttpMethod = new List<string> { "Get"' "Put"' "Post" }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = port'                                  }                              }'                          }'                          new FileRoute                          {                              DownstreamPathTemplate = "/connect/token"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/connect/token"'                              UpstreamHttpMethod = new List<string> { "Post" }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = 5001'                                  }                              }'                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,RoutingTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingTests.cs,should_fix_issue_271,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}/"' "/api/v1/modules/Test"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api/v1/modules/Test"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_200_with_query_string_template,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/subscriptions/{subscriptionId}/updates"' $"?unitId={unitId}"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway($"/api/units/{subscriptionId}/{unitId}/updates"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_200_with_odata_query_string,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/odata/customers"' "?$filter=Name%20eq%20'Sam'"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway($"/odata/customers?$filter=Name eq 'Sam' "))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_200_with_query_string_upstream_template,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/units/{subscriptionId}/{unitId}/updates"' ""' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway($"/api/subscriptions/{subscriptionId}/updates?unitId={unitId}"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_404_with_query_string_upstream_template_no_query_string,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/units/{subscriptionId}/{unitId}/updates"' ""' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway($"/api/subscriptions/{subscriptionId}/updates"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_404_with_query_string_upstream_template_different_query_string,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/units/{subscriptionId}/{unitId}/updates"' ""' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway($"/api/subscriptions/{subscriptionId}/updates?test=1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,should_return_response_200_with_query_string_upstream_template_multiple_params,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' $"/api/units/{subscriptionId}/{unitId}/updates"' "?productId=1"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway($"/api/subscriptions/{subscriptionId}/updates?unitId={unitId}&productId=1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,RoutingWithQueryStringTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\RoutingWithQueryStringTests.cs,GivenThereIsAServiceRunningOn,The following statement contains a magic number: _serviceHandler.GivenThereIsAServiceRunningOn(baseUrl' basePath' async context =>              {                  if ((context.Request.PathBase.Value != basePath) || context.Request.QueryString.Value != queryString)                  {                      context.Response.StatusCode = 500;                      await context.Response.WriteAsync("downstream path didnt match base path");                  }                  else                  {                      context.Response.StatusCode = statusCode;                      await context.Response.WriteAsync(responseBody);                  }              });
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl' "/api/home"' 200' "Hello from Laura"))              .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))              .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne))              .And(x => _steps.GivenThereIsAConfiguration(configuration))              .And(x => _steps.GivenOcelotIsRunningWithConsul())              .When(x => _steps.WhenIGetUrlOnTheApiGateway("/home"))              .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))              .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))              .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_handle_request_to_consul_for_downstream_service_and_make_request_no_re_routes,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl' "/something"' 200' "Hello from Laura"))              .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))              .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne))              .And(x => _steps.GivenThereIsAConfiguration(configuration))              .And(x => _steps.GivenOcelotIsRunningWithConsul())              .When(x => _steps.WhenIGetUrlOnTheApiGateway("/web/something"))              .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))              .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))              .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request_no_re_routes,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes($"/{serviceName}/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request_no_re_routes,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes($"/{serviceName}/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request_no_re_routes,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes($"/{serviceName}/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request_no_re_routes,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes($"/{serviceName}/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request_no_re_routes,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes($"/{serviceName}/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_consul_service_discovery_and_load_balance_request_no_re_routes,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes($"/{serviceName}/"' 50))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(50))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(24' 26))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_use_token_to_make_request_to_consul,The following statement contains a magic number: this.Given(_ => GivenThereIsAServiceRunningOn(downstreamServiceOneUrl' "/api/home"' 200' "Hello from Laura"))                  .And(_ => GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(_ => GivenTheServicesAreRegisteredWithConsul(serviceEntryOne))                  .And(_ => _steps.GivenThereIsAConfiguration(configuration))                  .And(_ => _steps.GivenOcelotIsRunningWithConsul())                  .When(_ => _steps.WhenIGetUrlOnTheApiGateway("/home"))                  .Then(_ => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(_ => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .And(_ => ThenTheTokenIs(token))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_send_request_to_service_after_it_becomes_available_in_consul,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))                  .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne' serviceEntryTwo))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .And(x => WhenIRemoveAService(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .And(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .And(x => ThenOnlyOneServiceHasBeenCalled())                  .And(x => WhenIAddAServiceBackIn(serviceEntryTwo))                  .And(x => GivenIResetCounters())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10))                  .Then(x => x.ThenTheTwoServicesShouldHaveBeenCalledTimes(10))                  .And(x => x.ThenBothServicesCalledRealisticAmountOfTimes(4' 6))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,should_handle_request_to_poll_consul_for_downstream_service_and_make_request,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn(downstreamServiceOneUrl' "/api/home"' 200' "Hello from Laura"))              .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl' serviceName))              .And(x => x.GivenTheServicesAreRegisteredWithConsul(serviceEntryOne))              .And(x => _steps.GivenThereIsAConfiguration(configuration))              .And(x => _steps.GivenOcelotIsRunningWithConsul())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayWaitingForTheResponseToBeOk("/home"))              .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))              .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))              .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceDiscoveryTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceDiscoveryTests.cs,ThenOnlyOneServiceHasBeenCalled,The following statement contains a magic number: _counterOne.ShouldBe(10);
Magic Number,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,should_fix_issue_555,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/OcelotServiceApplication/OcelotApplicationService/a"' 200' "Hello from Laura"' "b=c"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/a?b=c"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,should_support_service_fabric_naming_and_dns_service_stateless_and_guest,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/OcelotServiceApplication/OcelotApplicationService/api/values"' 200' "Hello from Laura"' "test=best"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/EquipmentInterfaces?test=best"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,should_support_service_fabric_naming_and_dns_service_statefull_and_actors,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/OcelotServiceApplication/OcelotApplicationService/api/values"' 200' "Hello from Laura"' "PartitionKind=test&PartitionKey=1"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/EquipmentInterfaces?PartitionKind=test&PartitionKey=1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,ServiceFabricTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\ServiceFabricTests.cs,should_support_placeholder_in_service_fabric_service_name,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/Service_1.0/Api/values"' 200' "Hello from Laura"' "test=best"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api/1.0/values?test=best"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,SslTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\SslTests.cs,should_dangerous_accept_any_server_certificate_validator,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"https://localhost:{port}"' "/"' 200' "Hello from Laura"' port))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,SslTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\SslTests.cs,should_not_dangerous_accept_any_server_certificate_validator,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"https://localhost:{port}"' "/"' 200' "Hello from Laura"' port))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.BadGateway))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,StartupTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StartupTests.cs,should_not_try_and_write_to_disk_on_startup_when_not_using_admin_api,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunningWithBlowingUpDiskRepo(fakeRepo))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,Steps,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\Steps.cs,GivenOcelotIsRunningUsingConsulToStoreConfig,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Ocelot.AcceptanceTests,Steps,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\Steps.cs,WhenIGetUrlOnTheApiGatewayWaitingForTheResponseToBeOk,The following statement contains a magic number: var result = Wait.WaitFor(2000).Until(() =>             {                 try                 {                     _response = _ocelotClient.GetAsync(url).Result;                     _response.EnsureSuccessStatusCode();                     return true;                 }                 catch (Exception)                 {                     return false;                 }             });
Magic Number,Ocelot.AcceptanceTests,Steps,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\Steps.cs,WhenIGetUrlOnTheApiGatewayMultipleTimes,The following statement contains a magic number: Thread.Sleep(_random.Next(40' 60));
Magic Number,Ocelot.AcceptanceTests,Steps,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\Steps.cs,WhenIGetUrlOnTheApiGatewayMultipleTimes,The following statement contains a magic number: Thread.Sleep(_random.Next(40' 60));
Magic Number,Ocelot.AcceptanceTests,Steps,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\Steps.cs,WhenIGetUrlOnTheApiGatewayMultipleTimes,The following statement contains a magic number: Thread.Sleep(_random.Next(40' 60));
Magic Number,Ocelot.AcceptanceTests,Steps,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\Steps.cs,WhenIGetUrlOnTheApiGatewayMultipleTimes,The following statement contains a magic number: Thread.Sleep(_random.Next(40' 60));
Magic Number,Ocelot.AcceptanceTests,Steps,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\Steps.cs,WhenIMakeLotsOfDifferentRequestsToTheApiGateway,The following statement contains a magic number: int numberOfRequests = 100;
Magic Number,Ocelot.AcceptanceTests,Steps,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\Steps.cs,Fire,The following statement contains a magic number: await Task.Delay(random.Next(0' 2));
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              LoadBalancerOptions = new FileLoadBalancerOptions                              {                                  Type = "CookieStickySessions"'                                  Key = "sessionid"'                                  Expiry = 300000                              }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortOne                                  }'                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortTwo                                  }                              }                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10' "sessionid"' "123"))                  .Then(x => x.ThenTheFirstServiceIsCalled(10))                  .Then(x => x.ThenTheSecondServiceIsCalled(0))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10' "sessionid"' "123"))                  .Then(x => x.ThenTheFirstServiceIsCalled(10))                  .Then(x => x.ThenTheSecondServiceIsCalled(0))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10' "sessionid"' "123"))                  .Then(x => x.ThenTheFirstServiceIsCalled(10))                  .Then(x => x.ThenTheSecondServiceIsCalled(0))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGatewayMultipleTimes("/"' 10' "sessionid"' "123"))                  .Then(x => x.ThenTheFirstServiceIsCalled(10))                  .Then(x => x.ThenTheSecondServiceIsCalled(0))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_different_downstream_host_for_different_re_route,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              LoadBalancerOptions = new FileLoadBalancerOptions                              {                                  Type = "CookieStickySessions"'                                  Key = "sessionid"'                                  Expiry = 300000                              }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortOne                                  }'                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortTwo                                  }                              }                          }'                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/test"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              LoadBalancerOptions = new FileLoadBalancerOptions                              {                                  Type = "CookieStickySessions"'                                  Key = "bestid"'                                  Expiry = 300000                              }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortTwo                                  }'                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortOne                                  }                              }                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_different_downstream_host_for_different_re_route,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              LoadBalancerOptions = new FileLoadBalancerOptions                              {                                  Type = "CookieStickySessions"'                                  Key = "sessionid"'                                  Expiry = 300000                              }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortOne                                  }'                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortTwo                                  }                              }                          }'                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/test"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              LoadBalancerOptions = new FileLoadBalancerOptions                              {                                  Type = "CookieStickySessions"'                                  Key = "bestid"'                                  Expiry = 300000                              }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortTwo                                  }'                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortOne                                  }                              }                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_different_downstream_host_for_different_re_route,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"' "sessionid"' "123"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/test"' "bestid"' "123"))                  .Then(x => x.ThenTheFirstServiceIsCalled(1))                  .Then(x => x.ThenTheSecondServiceIsCalled(1))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_different_downstream_host_for_different_re_route,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"' "sessionid"' "123"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/test"' "bestid"' "123"))                  .Then(x => x.ThenTheFirstServiceIsCalled(1))                  .Then(x => x.ThenTheSecondServiceIsCalled(1))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host_for_different_re_route,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              LoadBalancerOptions = new FileLoadBalancerOptions                              {                                  Type = "CookieStickySessions"'                                  Key = "sessionid"'                                  Expiry = 300000                              }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortOne                                  }'                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortTwo                                  }                              }                          }'                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/test"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              LoadBalancerOptions = new FileLoadBalancerOptions                              {                                  Type = "CookieStickySessions"'                                  Key = "sessionid"'                                  Expiry = 300000                              }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortTwo                                  }'                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortOne                                  }                              }                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host_for_different_re_route,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                      {                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              LoadBalancerOptions = new FileLoadBalancerOptions                              {                                  Type = "CookieStickySessions"'                                  Key = "sessionid"'                                  Expiry = 300000                              }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortOne                                  }'                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortTwo                                  }                              }                          }'                          new FileRoute                          {                              DownstreamPathTemplate = "/"'                              DownstreamScheme = "http"'                              UpstreamPathTemplate = "/test"'                              UpstreamHttpMethod = new List<string> { "Get" }'                              LoadBalancerOptions = new FileLoadBalancerOptions                              {                                  Type = "CookieStickySessions"'                                  Key = "sessionid"'                                  Expiry = 300000                              }'                              DownstreamHostAndPorts = new List<FileHostAndPort>                              {                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortTwo                                  }'                                  new FileHostAndPort                                  {                                      Host = "localhost"'                                      Port = downstreamPortOne                                  }                              }                          }                      }              };
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host_for_different_re_route,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"' "sessionid"' "123"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/test"' "sessionid"' "123"))                  .Then(x => x.ThenTheFirstServiceIsCalled(2))                  .Then(x => x.ThenTheSecondServiceIsCalled(0))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host_for_different_re_route,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"' "sessionid"' "123"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/test"' "sessionid"' "123"))                  .Then(x => x.ThenTheFirstServiceIsCalled(2))                  .Then(x => x.ThenTheSecondServiceIsCalled(0))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,StickySessionsTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\StickySessionsTests.cs,should_use_same_downstream_host_for_different_re_route,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' 200))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' 200))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"' "sessionid"' "123"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/test"' "sessionid"' "123"))                  .Then(x => x.ThenTheFirstServiceIsCalled(2))                  .Then(x => x.ThenTheSecondServiceIsCalled(0))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,TwoDownstreamServicesTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\TwoDownstreamServicesTests.cs,should_fix_issue_194,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' "/api/user/info"' 200' "user"))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' "/api/product/info"' 200' "product"))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api/user/info?id=1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("user"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api/product/info?id=1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("product"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,TwoDownstreamServicesTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\TwoDownstreamServicesTests.cs,should_fix_issue_194,The following statement contains a magic number: this.Given(x => x.GivenProductServiceOneIsRunning(downstreamServiceOneUrl' "/api/user/info"' 200' "user"))                  .And(x => x.GivenProductServiceTwoIsRunning(downstreamServiceTwoUrl' "/api/product/info"' 200' "product"))                  .And(x => x.GivenThereIsAFakeConsulServiceDiscoveryProvider(fakeConsulServiceDiscoveryUrl))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api/user/info?id=1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("user"))                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/api/product/info?id=1"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("product"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,UpstreamHostTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\UpstreamHostTests.cs,should_return_response_200_with_simple_url_and_hosts_match,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,UpstreamHostTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\UpstreamHostTests.cs,should_return_response_200_with_simple_url_and_hosts_match_multiple_re_routes,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          UpstreamHost = "localhost"                      }'                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = 50000'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          UpstreamHost = "DONTMATCH"                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,UpstreamHostTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\UpstreamHostTests.cs,should_return_response_200_with_simple_url_and_hosts_match_multiple_re_routes,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,UpstreamHostTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\UpstreamHostTests.cs,should_return_response_200_with_simple_url_and_hosts_match_multiple_re_routes_reversed,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = 50000'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          UpstreamHost = "DONTMATCH"                      }'                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          UpstreamHost = "localhost"                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,UpstreamHostTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\UpstreamHostTests.cs,should_return_response_200_with_simple_url_and_hosts_match_multiple_re_routes_reversed,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,UpstreamHostTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\UpstreamHostTests.cs,should_return_response_200_with_simple_url_and_hosts_match_multiple_re_routes_reversed_with_no_host_first,The following statement contains a magic number: var configuration = new FileConfiguration              {                  Routes = new List<FileRoute>                  {                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = 50000'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                      }'                      new FileRoute                      {                          DownstreamPathTemplate = "/"'                          DownstreamScheme = "http"'                          DownstreamHostAndPorts = new List<FileHostAndPort>                          {                              new FileHostAndPort                              {                                  Host = "localhost"'                                  Port = port'                              }                          }'                          UpstreamPathTemplate = "/"'                          UpstreamHttpMethod = new List<string> { "Get" }'                          UpstreamHost = "localhost"                      }                  }              };
Magic Number,Ocelot.AcceptanceTests,UpstreamHostTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\UpstreamHostTests.cs,should_return_response_200_with_simple_url_and_hosts_match_multiple_re_routes_reversed_with_no_host_first,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.OK))                  .And(x => _steps.ThenTheResponseBodyShouldBe("Hello from Laura"))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,UpstreamHostTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\UpstreamHostTests.cs,should_return_response_404_with_simple_url_and_hosts_dont_match,The following statement contains a magic number: this.Given(x => x.GivenThereIsAServiceRunningOn($"http://localhost:{port}"' "/"' 200' "Hello from Laura"))                  .And(x => _steps.GivenThereIsAConfiguration(configuration))                  .And(x => _steps.GivenOcelotIsRunning())                  .When(x => _steps.WhenIGetUrlOnTheApiGateway("/"))                  .Then(x => _steps.ThenTheStatusCodeShouldBe(HttpStatusCode.NotFound))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,should_proxy_websocket_input_to_downstream_service,The following statement contains a magic number: this.Given(_ => _steps.GivenThereIsAConfiguration(config))                  .And(_ => _steps.StartFakeOcelotWithWebSockets())                  .And(_ => StartFakeDownstreamService($"http://{downstreamHost}:{downstreamPort}"' "/ws"))                  .When(_ => StartClient("ws://localhost:5000/"))                  .Then(_ => ThenTheReceivedCountIs(10))                  .BDDfy();
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,ThenBothDownstreamServicesAreCalled,The following statement contains a magic number: _firstRecieved.Count.ShouldBe(10);
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,ThenBothDownstreamServicesAreCalled,The following statement contains a magic number: _secondRecieved.Count.ShouldBe(10);
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartClient,The following statement contains a magic number: var sending = Task.Run(async () =>              {                  string line = "test";                  for (int i = 0; i < 10; i++)                  {                      var bytes = Encoding.UTF8.GetBytes(line);                        await client.SendAsync(new ArraySegment<byte>(bytes)' WebSocketMessageType.Text' true'                          CancellationToken.None);                      await Task.Delay(10);                  }                    await client.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartClient,The following statement contains a magic number: var sending = Task.Run(async () =>              {                  string line = "test";                  for (int i = 0; i < 10; i++)                  {                      var bytes = Encoding.UTF8.GetBytes(line);                        await client.SendAsync(new ArraySegment<byte>(bytes)' WebSocketMessageType.Text' true'                          CancellationToken.None);                      await Task.Delay(10);                  }                    await client.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartClient,The following statement contains a magic number: var receiving = Task.Run(async () =>              {                  var buffer = new byte[1024 * 4];                    while (true)                  {                      var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer)' CancellationToken.None);                        if (result.MessageType == WebSocketMessageType.Text)                      {                          _firstRecieved.Add(Encoding.UTF8.GetString(buffer' 0' result.Count));                      }                      else if (result.MessageType == WebSocketMessageType.Close)                      {                          if (client.State != WebSocketState.Closed)                          {                              // Last version' the client state is CloseReceived                              // Valid states are: Open' CloseReceived' CloseSent                              await client.CloseAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);                          }                            break;                      }                  }              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartClient,The following statement contains a magic number: var receiving = Task.Run(async () =>              {                  var buffer = new byte[1024 * 4];                    while (true)                  {                      var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer)' CancellationToken.None);                        if (result.MessageType == WebSocketMessageType.Text)                      {                          _firstRecieved.Add(Encoding.UTF8.GetString(buffer' 0' result.Count));                      }                      else if (result.MessageType == WebSocketMessageType.Close)                      {                          if (client.State != WebSocketState.Closed)                          {                              // Last version' the client state is CloseReceived                              // Valid states are: Open' CloseReceived' CloseSent                              await client.CloseAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);                          }                            break;                      }                  }              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartSecondClient,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartSecondClient,The following statement contains a magic number: var sending = Task.Run(async () =>              {                  string line = "test";                  for (int i = 0; i < 10; i++)                  {                      var bytes = Encoding.UTF8.GetBytes(line);                        await client.SendAsync(new ArraySegment<byte>(bytes)' WebSocketMessageType.Text' true'                          CancellationToken.None);                      await Task.Delay(10);                  }                    await client.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartSecondClient,The following statement contains a magic number: var sending = Task.Run(async () =>              {                  string line = "test";                  for (int i = 0; i < 10; i++)                  {                      var bytes = Encoding.UTF8.GetBytes(line);                        await client.SendAsync(new ArraySegment<byte>(bytes)' WebSocketMessageType.Text' true'                          CancellationToken.None);                      await Task.Delay(10);                  }                    await client.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartSecondClient,The following statement contains a magic number: var receiving = Task.Run(async () =>              {                  var buffer = new byte[1024 * 4];                    while (true)                  {                      var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer)' CancellationToken.None);                        if (result.MessageType == WebSocketMessageType.Text)                      {                          _secondRecieved.Add(Encoding.UTF8.GetString(buffer' 0' result.Count));                      }                      else if (result.MessageType == WebSocketMessageType.Close)                      {                          if (client.State != WebSocketState.Closed)                          {                              // Last version' the client state is CloseReceived                              // Valid states are: Open' CloseReceived' CloseSent                              await client.CloseAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);                          }                            break;                      }                  }              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartSecondClient,The following statement contains a magic number: var receiving = Task.Run(async () =>              {                  var buffer = new byte[1024 * 4];                    while (true)                  {                      var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer)' CancellationToken.None);                        if (result.MessageType == WebSocketMessageType.Text)                      {                          _secondRecieved.Add(Encoding.UTF8.GetString(buffer' 0' result.Count));                      }                      else if (result.MessageType == WebSocketMessageType.Close)                      {                          if (client.State != WebSocketState.Closed)                          {                              // Last version' the client state is CloseReceived                              // Valid states are: Open' CloseReceived' CloseSent                              await client.CloseAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None);                          }                            break;                      }                  }              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartFakeDownstreamService,The following statement contains a magic number: await _serviceHandler.StartFakeDownstreamService(url' path' async (context' next) =>              {                  if (context.Request.Path == path)                  {                      if (context.WebSockets.IsWebSocketRequest)                      {                          var webSocket = await context.WebSockets.AcceptWebSocketAsync();                          await Echo(webSocket);                      }                      else                      {                          context.Response.StatusCode = 400;                      }                  }                  else                  {                      await next();                  }              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,StartSecondFakeDownstreamService,The following statement contains a magic number: await _serviceHandler.StartFakeDownstreamService(url' path' async (context' next) =>              {                  if (context.Request.Path == path)                  {                      if (context.WebSockets.IsWebSocketRequest)                      {                          WebSocket webSocket = await context.WebSockets.AcceptWebSocketAsync();                          await Message(webSocket);                      }                      else                      {                          context.Response.StatusCode = 400;                      }                  }                  else                  {                      await next();                  }              });
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,Echo,The following statement contains a magic number: var buffer = new byte[1024 * 4];
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,Echo,The following statement contains a magic number: var buffer = new byte[1024 * 4];
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,Message,The following statement contains a magic number: var buffer = new byte[1024 * 4];
Magic Number,Ocelot.AcceptanceTests,WebSocketTests,C:\Users\victo\Downloads\Ocelot-develop\Ocelot-develop\test\Ocelot.AcceptanceTests\WebSocketTests.cs,Message,The following statement contains a magic number: var buffer = new byte[1024 * 4];
