Implementation smell,Namespace,Class,File,Method,Description
Long Statement,EventSourcingMiddleware,Startup,C:\Users\victo\Downloads\PROYECTOS_ACTUALIZADOS\vehicle-tracking-microservices-master\vehicle-tracking-microservices-master\vehicle-tracking-poc\EventSourcing\EventSourcingMiddleware\Startup.cs,ConfigureServices,The length of the statement  "                            Logger.LogInformation($"[x] Event sourcing service receiving a message from exchange: {_systemLocalConfiguration.MiddlewareExchange}' route :{_systemLocalConfiguration.MessageSubscriberRoute}");" is 194.
Magic Number,EventSourcingMiddleware,Program,C:\Users\victo\Downloads\PROYECTOS_ACTUALIZADOS\vehicle-tracking-microservices-master\vehicle-tracking-microservices-master\vehicle-tracking-poc\EventSourcing\EventSourcingMiddleware\Program.cs,Main,The following statement contains a magic number: new Function(mainLogger' Identifiers.RetryCount).Decorate(() =>                  {                      var config = new ConfigurationBuilder()                          .AddCommandLine(args)                          .AddEnvironmentVariables() 						 .AddJsonFile("appsettings.json"' optional: true' reloadOnChange: true) 						 .Build();                       var builder = new WebHostBuilder()                             .UseConfiguration(config) 							.UseStartup<Startup>()                             .UseKestrel(options =>                             {                                 // TODO: support end-point for self checking' monitoring' administration' service / task cancellation....                                  options.Listen(IPAddress.Any' 80); // docker outer port                             });                       var host = builder.Build();                      host.Run();                      return Task.CompletedTask;                  }' (ex) =>                  {                      switch (ex)                      {                          case BrokerUnreachableException brokerEx:                              return true;                          case ConnectFailureException connEx:                              return true;                          case SocketException socketEx:                              return true;                          default:                              return false;                      }                  }).Wait();
